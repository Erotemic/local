" COMMON JUMP TO RC FILES
" ~/.vimrc-local
" ~/local/vim/rc/pyvim_funcs.py
" ~/local/vim/rc/pyvim_funcs.py
" ~/local/vim/rc/custom_misc_functions.vim  
" ~/local/vim/rc/custom_ipy_interact_funcs.vim
" ~/local/vim/rc/custom_py_functions.vim
" ~/local/vim/rc_settings/plugin_settings.vim
" ~/local/vim/rc_settings/plugins_latex.vim
" ~/local/vim/rc_settings/plugins_latex2.vim
" ~/local/vim/rc_settings/behavior_settings.vim
" ~/local/vim/rc_settings/remap_settings.vim
" ~/local/vim/rc_settings/autocommand_settings.vim


" ~/code/vimtk/plugin/vimtk.vim
" ~/code/vimtk/autoload/vimtk.vim
" ~/code/vimtk/vimtk/core.py
" ~/local/vim/vimfiles/bundle/vimtk/plugin/vimtk.vim


" Spell Files
":e ~/local/vim/vimfiles/spell/en.utf-8.add
":e ~/local/vim/vimfiles/spell/en.latin1.add

" Syntax is based in:
" $VIMRUNTIME/syntax
":e $VIMRUNTIME/syntax/python.vim
":e $VIMRUNTIME/syntax/markdown.vim
":e ~/local/init/ensure_vim_plugins.py
":e ~/local/vim/rc_settings/remap_settings.vim
":e ~/local/vim/rc_settings/plugin_settings.vim
" source ~/local/vim/vimfiles/syntax/python.vim
" source ~/local/vim/vimfiles/after/syntax/tex.vim
" source ~/local/vim/vimfiles/after/syntax/cmake.vim
" source ~/local/vim/vimfiles/after/syntax/tex.vim
" source ~/local/vim/vimfiles/after/syntax/python.vim
" source ~/local/vim/vimfiles/after/ftplugin/python/folding.vim 

" My plugins are grabbed from
" ~/local/init/REPOS1.py
" overloading happens in 
" ~/local/vim/vimfiles/after/syntax

" Snippets Directory
" ~/local/vim/vimfiles/UltiSnips/python.snippets

" REQUIRED BY VUNDLE
set nocompatible
filetype off

if has('win32')
    let $HOME_DPATH = $USERPROFILE
else
    let $HOME_DPATH = $HOME
endif

if has("win32") || has("win16")
    :set runtimepath+=$HOME_DPATH\local\vim\portable_vimrc 

    " TODO: the fix didnt work
    " https://stackoverflow.com/questions/24833970/get-e484-cant-open-file-tmp-foo-a-when-using-systemwget-in-vim
    "set noshelltemp
    "if has("gui_running") == 0
    "endif
    
    " Fix issue where system() breaks when running from git-bash on win32
    set shell=C:\WINDOWS\system32\cmd.exe
endif

if has('win32')
    set pythonthreedll=$HOME_DPATH\Miniconda3\python36.dll
    echo $pythonthreedll
    "command! -nargs=1 Python2or3 python3 <args>
endif

if has('python3')
    command! -nargs=1 Python2or3 python3 <args>
elseif has('python')
    command! -nargs=1 Python2or3 python <args>
else
    echo "Error: Requires Vim compiled with +python or +python3"
    finish
endif

set runtimepath+=~/local/vim/vimfiles/
source ~/local/vim/rc/win32_presource.vim
"source ~/local/vim/rc/venv_presource.vim
set encoding=utf8
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
let g:vimtk_default_mappings = 1


"===========PLUGINS==========="
" PLUGIN: Vundle
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
" # Now using vim-plug instead of vundle
" 
" PLUGIN: vim-plug
" https://github.com/junegunn/vim-plug
Python2or3 << EOF
"""
# Install vim-plug into your autoload directory
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"""
EOF

call plug#begin('~/.vim/bundle')

Plug 'sjl/badwolf'
Plug 'osyo-manga/vim-over'
Plug 'file:///home/joncrall/.vim/bundle/vimtk'
Plug 'posva/vim-vue'

Plug 'vim-scripts/AnsiEsc.vim'
Plug 'chrisbra/unicode.vim'
Plug 'tell-k/vim-autopep8'
Plug 'vim-syntastic/syntastic'

Plug 'mhinz/vim-startify'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'

Plug 'tpope/vim-markdown'

Plug 'vim-scripts/taglist.vim'

"Plug 'Erotemic/vimtk'
"Plug 'SirVer/ultisnips'
"Plug 'cjrh/vim-conda'
"Plug 'file:///home/joncrall/.vim/bundle/vimtk/'
"Plug 'file:///home/joncrall/.vim/bundle/jedi-vim/'
"Plug 'file:///home/joncrall/.vim/bundle/badwolf/'

Python2or3 << EOF

# More programable syntax for plugins
import sys
#print('sys.executable = {!r}'.format(sys.executable))
import os
import vim

def get_enabled_plugins():
    """
    Returns a list of disabled plugin names

    SeeAlso:
        ~/local/init/ensure_vim_plugins.py
        # list of plugins are in
        ~/local/init/REPOS1.py
    """
    WIN32 = sys.platform.startswith('win32')
    UNIX = not WIN32
    UNIX = True  # HACK
    flag = True

    github_enabled = [
        #'scrooloose/nerdtree',
        #'scrooloose/nerdcommenter',
        #'majutsushi/tagbar',

        (flag, 'google/vim-searchindex'),
        #(flag, 'vim-devicons'),

        (flag & UNIX, 'ervandew/supertab'),
        # (flag & UNIX, 'mhinz/vim-startify'),

        # (flag & UNIX, 'vim-syntastic/syntastic'),
        (flag, 'davidhalter/jedi-vim'),
        (flag, 'LaTeX-Box-Team/LaTeX-Box'),
        #(flag, 'vim-markdown'),
        #(flag, 'vim-syntax-markdown'),
    ]

    # Set flag to be false to disable plugin
    known_plugins = [
        #(flag, 'vimtk'),

        #(flag, 'vim-searchindex'),
        #(flag, 'vim-devicons'),

        #(flag & UNIX, 'syntastic'),
        #(flag, 'jedi-vim'),
        #(flag, 'LaTeX-Box'),
        #(flag, 'vim-markdown'),
        #(flag, 'vim-syntax-markdown'),
        #(flag, 'vim-autopep8'),
        (False, 'vim-colors-solarized'),

        #(flag, 'ultisnips'),
        #(flag, 'vim-snippets'),
        (False, 'vim-powerline'),
        #(flag, 'vim-virtualenv'),
        #(flag, 'vim-autopep8'),

        #(flag, 'AnsiEsc.vim'),
        #(flag, 'unicode.vim'),
        #(flag, 'badwolf' or 'sjl/badwolf'),
        #(flag, 'rainbow_parentheses.vim'),
        #(flag, 'closetag.vim'),
        #(flag, 'gruvbox'),
        #(flag, 'codeschool-vim-theme'),
        #(flag, 'phd'),
        #(flag & UNIX, 'taglist.vim'),  # ctags

        (False & UNIX, 'vim-buffergator'),
        #(False, 'vim-ipython'), 
        #(False, 'vim-quickopen-tvio'),
        (False, 'vim-fugitive'), (False, 'csv.vim'), (False, 'grep.vim'), 
        (False, 'vim-repeat'), (False, 'Conque-Shell'),
        (False, 'highlight.vim'), (False, 'vim-airline'), 
        (False, 'vim-multiple-cursors'), (False, 'vim-sensible'), 
        (False, 'vim-surround'), (False, 'vim-unimpaired'),
        (False, 'vim-vimtweak'),
        (False, 'pathogen'),
        #(False, 'Vundle.vim'),  # hack, we already enabled it
    ] 
    file_enabled = ['file:///home/joncrall/.vim/bundle/' + name for flag, name in known_plugins if flag]
    #disabled = [name for flag, name in known_plugins if not flag]

    enabled = file_enabled + github_enabled
    enabled = [a if not isinstance(a, tuple) else (a[1] if a[0] else None) for a in enabled]
    enabled = [a for a in enabled if a]

    return enabled


enabled = get_enabled_plugins()

for name in enabled:
    vim.command("Plug '{}'".format(name))

EOF

" All of your Plugins must be added before the following line
call plug#end()            " required
filetype plugin indent on
syntax on

"call virtualenv#activate('venv3')
":VirtualEnvActivate
" VirtualEnvActivate venv3


" PLUGIN: External non-plugin source files
source ~/local/vim/rc/align.vim
"source ~/local/vim/rc/enable_code_snippets.vim
source ~/local/vim/rc/custom_font_functions.vim
source ~/local/vim/rc/custom_misc_functions.vim  
source ~/local/vim/rc/custom_ipy_interact_funcs.vim  
source ~/local/vim/rc/custom_py_functions.vim

"===========Settings==========="
source ~/local/vim/rc_settings/plugin_settings.vim
source ~/local/vim/rc_settings/behavior_settings.vim
source ~/local/vim/rc_settings/remap_funcs.vim
source ~/local/vim/rc_settings/remap_settings.vim
source ~/local/vim/rc_settings/autocommand_settings.vim
source ~/local/vim/rc_settings/plugins_latex.vim
source ~/local/vim/rc_settings/plugins_latex2.vim


"call VimTK_default_remap()


let g:vim_markdown_math = 1
let g:vim_markdown_folding_style_pythonic = 1

"" Trial / project / temporary vimrc commands
"" If they are good put them into a settings file

:call VimTK_default_remap()

" Swap colon and semicolon
:call vimtk#swap_keys(':', ';')

call vimtk#quickopen(',', '~/.vimrc')
call vimtk#quickopen('>', '~/code/flann/src/python/pyflann/index.py')
call vimtk#quickopen('.', '~/code/flann/src/cpp/flann/algorithms/nn_index.h')
call vimtk#quickopen('<', '~/local/vim/rc/pyvim_funcs.py')
call vimtk#quickopen('/', '~/code/ibeis_cnn')
call vimtk#quickopen('!', '~/local/vim/rc/pyvim_funcs.py')
call vimtk#quickopen('*', '~/code/hesaff/pyhesaff/_pyhesaff.py')
call vimtk#quickopen('1', '~/code/ibeis/ibeis/control/manual_annot_funcs.py')
call vimtk#quickopen('2', '~/local/scripts/register_files.py')
call vimtk#quickopen('@', '~/code/mtgmonte/mtgmonte.py')
"call vimtk#quickopen('3', '~/code/guitool/guitool/api_item_model.py')
call vimtk#quickopen('3', '~/code/guitool/guitool/guitool_components.py')
call vimtk#quickopen('4', '~/local/init/freshstart_ubuntu.sh')
call vimtk#quickopen('$', '~/local/build_scripts/')
call vimtk#quickopen('5', '~/local/homelinks/dotfiles/bashrc')
call vimtk#quickopen('%', '~/local/misc/learn.py')
call vimtk#quickopen('7', '~/local/vim/rc/custom_font_functions.vim')
call vimtk#quickopen('^', '~/code/Lasagne')
call vimtk#quickopen('6', '~/code/scikit-learn/sklearn/')
call vimtk#quickopen('8', '~/code/hesaff/src/hesaff.cpp')
call vimtk#quickopen('9', '~/local/misc/modulechanges.sh')

call vimtk#quickopen('0', '~/local/vim/rc/custom_regex_commands.vim')
call vimtk#quickopen('_', '$VIMRUNTIME/../_vimrc')
call vimtk#quickopen('A', '~/code/ibeis/ibeis/expt/annotation_configs.py')
call vimtk#quickopen('a', '~/code/ibeis/ibeis/core_annots.py')
"call vimtk#quickopen('b', '~/code/pgmpy/pgmpy/factors/Factor.py')
call vimtk#quickopen('b', '~/code/scikit-learn/sklearn/cluster/k_means_.py')
call vimtk#quickopen('8', '~/code/hesaff/src/hesaff.cpp')
call vimtk#quickopen('b', '~/code/ubelt/ubelt/__init__.py')
"call vimtk#quickopen('b', '~/code/pgmpy/pgmpy/factors/Factor.py')
"call vimtk#quickopen('B', '~/code/ibeis_cnn/ibeis_cnn/models/abstract_models.py')
call vimtk#quickopen('c', '~/code/ibeis/ibeis/control/IBEISControl.py')
call vimtk#quickopen('C', '~/code/ibeis/ibeis/core_annots.py')
call vimtk#quickopen('D', '~/code/')
call vimtk#quickopen('db', '~/code/dtool/dtool/base.py')
call vimtk#quickopen('ds', '~/code/dtool/dtool/sql_control.py')
call vimtk#quickopen('dc', '~/code/dtool/dtool/depcache_control.py')
call vimtk#quickopen('d ', '~/code/dtool/dtool/depcache_control.py')
call vimtk#quickopen('de', '~/code/dtool/dtool/example_depcache.py')
call vimtk#quickopen('dt', '~/code/dtool/dtool/depcache_table.py')
call vimtk#quickopen('e', '~/code/ibeis/ibeis/expt/experiment_drawing.py')
call vimtk#quickopen('ed', '~/code/ibeis/ibeis/expt/experiment_drawing.py')
call vimtk#quickopen('eh', '~/code/ibeis/ibeis/expt/harness.py')
call vimtk#quickopen('ep', '~/code/ibeis/ibeis/expt/experiment_printres.py')
call vimtk#quickopen('tr', '~/code/ibeis/ibeis/expt/test_result.py')
call vimtk#quickopen('E', '~/code/ibeis/ibeis/expt/experiment_configs.py')
call vimtk#quickopen('f', '~/code/fletch/CMake')
call vimtk#quickopen('F', '~/code/ibeis/ibeis/init/filter_annots.py')
"call vimtk#quickopen('g', '~/code/ibeis/ibeis/gui/inspect_gui.py')
"call vimtk#quickopen('G', '~/code/ibeis/ibeis/gui/newgui.py')
""""""""""""""
call vimtk#quickopen('H', '~/code/ibeis/ibeis/algo/hots/pipeline.py')
call vimtk#quickopen('h', '~/code/graphid/graphid/core/annot_inference.py')
""""""""""""""
"call vimtk#quickopen('i', '~/code/ibeis/ibeis/__init__.py')
"call vimtk#quickopen('I', '~/code/ibeis/ibeis/other/dbinfo.py')
"call vimtk#quickopen('j', '~/code/ibeis/ibeis/dbio/export_subset.py')
"call vimtk#quickopen('J', '~/local/vim/vimfiles/bundle/jedi-vim/jedi_vim.py')
"call vimtk#quickopen('k', '~/code/ibeis/ibeis/algo/hots/chip_match.py')
"call vimtk#quickopen('K', '~/code/ibeis-flukematch-module/ibeis_flukematch/plugin.py')
"call vimtk#quickopen('k', '~/code/ibeis/ibeis/algo/smk/smk_pipeline.py')
call vimtk#quickopen('l', '~/latex/crall-thesis-2017/main.tex')
"call vimtk#quickopen('L', '~/latex/crall-iccvw-2017/main.tex')
call vimtk#quickopen('L', '~/latex/crall-fishnet-2018/main.tex')
"call vimtk#quickopen('L', '~/latex/crall-thesis-2017/sec-3-4-expt.tex')
"call vimtk#quickopen('m', '~/code/ibeis/ibeis/init/main_helpers.py')
"call vimtk#quickopen('M', '~/code/ibeis/ibeis/main_module.py')
""""""""""""""
"call vimtk#quickopen('n', '~/code/ibeis/ibeis/algo/Config.py')
"call vimtk#quickopen('n', '~/code/networkx/networkx/algorithms/connectivity')
"call vimtk#quickopen('N', '~/code/ibeis/ibeis/algo/hots/score_normalization.py')
"call vimtk#quickopen('N', '~/code/ibeis_cnn/ibeis_cnn/custom_layers.py')
""""""""""""""
call vimtk#quickopen('o', '~/code/ibeis/ibeis/algo/verif/vsone.py')
"call vimtk#quickopen('o', '~/code/ibeis/ibeis/algo/preproc/preproc_annot.py')
"call vimtk#quickopen('O', '~/code/ibeis/ibeis/algo/preproc/preproc_chip.py')
""""""""""""""
call vimtk#quickopen('p', '~/code/plottool/plottool/__init__.py')
"call vimtk#quickopen('P', '~/code/plottool/plottool/draw_func2.py')
""""""""""""""
"call vimtk#quickopen('q', '~/code/ibeis/ibeis/algo/hots/query_request.py')
"call vimtk#quickopen('Q', '~/code/ibeis/ibeis/algo/hots/hots_query_result.py')
""""""""""""""
"call vimtk#quickopen('r', '~/code/ibeis/ibeis/algo/graph/core.py')
"call vimtk#quickopen('R', '~/code/ibeis/README.md')
"call vimtk#quickopen('s', '~/code/ibeis/ibeis/scripts/gen_cand_expts.py')
"call vimtk#quickopen('s', '~/code/ibeis/ibeis/scripts/specialdraw.py')
"call vimtk#quickopen('s', '~/code/ibeis/ibeis/scripts/classify_shark.py')
"call vimtk#quickopen('s', '~/code/ibeis/ibeis/scripts/script_vsone.py')
"call vimtk#quickopen('s', '~/code/ibeis/ibeis/scripts/iccv.py')
"call vimtk#quickopen('s', '~/code/ibeis/ibeis/scripts/thesis.py')
call vimtk#quickopen('S', '~/code/ibeis/setup.py')
call vimtk#quickopen('s', '~/code/ibeis/ibeis/scripts/postdoc.py')
"call vimtk#quickopen('t', '~/code/ibeis/ibeis/templates/generate_notebook.py')
"call vimtk#quickopen('T', '~/code/ibeis/ibeis/tag_funcs.py')
call vimtk#quickopen('u', '~/code/utool/utool/__init__.py')
"call vimtk#quickopen('U', '~/code/utool/utool/util_dev.py')
"call vimtk#quickopen('v', '~/code/vtool_ibeis/vtool_ibeis/__init__.py')
call vimtk#quickopen('V', '~/code/vtool_ibeis/vtool_ibeis/__init__.py')
"call vimtk#quickopen('W', '~/code/ibeis_cnn/ibeis_cnn/models/abstract_models.py')
"call vimtk#quickopen('w', '~/code/ibeis/ibeis/web/apis_query.py')
"call vimtk#quickopen('x', '~/code/ibeis/ibeis/viz/interact/interact_name.py')
"call vimtk#quickopen('X', '~/code/ibeis/ibeis/algo/hots/multi_index.py')
"call vimtk#quickopen('y', '~/code/ibeis/ibeis/algo/hots/vsone_pipeline.py')
"call vimtk#quickopen('Y', '~/code/cyth/cyth/cyth_script.py')
"call vimtk#quickopen('z', '~/code/ibeis/ibeis/viz/viz_graph2.py')
"call vimtk#quickopen('Z', '~/code/ibeis/ibeis/algo/hots/neighbor_index.py')


call vimtk#quickopen('l', '~/code/VIAME/plugins')
"call vimtk#quickopen('s', '~/code/VIAME/packages/kwiver/sprokit')
"call vimtk#quickopen('v', '~/code/VIAME/packages/kwiver/vital')
"call vimtk#quickopen('a', '~/code/VIAME/packages/kwiver/arrows')

"call vimtk#quickopen('k', '~/code/kwiver')
"call vimtk#quickopen('K', '~/code/VIAME/packages/kwiver')

call vimtk#quickopen('r', '~/code/kwiver/sprokit')
call vimtk#quickopen('R', '~/code/VIAME/packages/kwiver/sprokit')

"call vimtk#quickopen('c', '~/code/VIAME/plugins/camtrawl/python/run_camtrawl.py')
call vimtk#quickopen('w', '~/code/VIAME/plugins/camtrawl/python/viame/processes/camtrawl/processes.py')
call vimtk#quickopen('8', '~/local/misc/kwiver_places.sh')
call vimtk#quickopen('y', '~/local/misc/kwiver_places.sh')
call vimtk#quickopen('x', '~/code/xdoctest/xdoctest/core.py')
"call vimtk#quickopen('m', '~/misc/notes.sh')
call vimtk#quickopen('m', '~/code/mmdetection/mmdet')

call vimtk#quickopen('q', '~/local/vim/vimfiles/bundle/vimtk/vimtk/core.py')

"call vimtk#quickopen('a', '~/sseg/pysseg')
"call vimtk#quickopen('a', '~/code/clab/clab/live/')
"call vimtk#quickopen('c', '~/code/clab/clab')
"call vimtk#quickopen('a', '~/code/clab/clab/fit_harness.py')
call vimtk#quickopen('n', '~/code/netharn/netharn/fit_harn.py')
call vimtk#quickopen('N', '~/code/netharn/examples/yolo_voc.py')
call vimtk#quickopen('B', '~/code/bioharn/bioharn/detect_fit.py')


if has("win32") || has("win16")
    " Try to hack windows to recognize the custom syntax
    " Seems to work. Thank god.
    autocmd Filetype tex,latex source $HOME_DPATH\local\vim\vimfiles\after\syntax\tex.vim
endif

" Source special local vim settings
if filereadable($HOME_DPATH . "/.vimrc-erotemic")
    source ~/.vimrc-erotemic
endif
if filereadable($HOME_DPATH . "/.vimrc-internal")
    source ~/.vimrc-internal
endif
if filereadable($HOME_DPATH . "/.vimrc-local")
    source ~/.vimrc-local
endif

        
"syntax sync minlines=500
"set visualbell
"set noeb vb t_vb=

" mkdir -p ~/.vim/files/info
:set viminfo='100,n$HOME_DPATH/.vim/files/info/viminfo
let g:startify_bookmarks = ['~/.vimrc', '~/.bashrc']
Python2or3 << EOF
listvars = {
    'startify_bookmarks': [
        '~/local/vim/portable_vimrc',
        '~/.bashrc',
        '~/code/scikit-learn/sklearn/cluster/k_means.py',
        '~/code/ibeis/ibeis/algo/hots/vsone_pipeline.py',
        '~/code/vtool_ibeis/vtool_ibeis/matching.py'
    ]
}
for varname, list_ in listvars.items():
    liststr = '[' + ', '.join('"%s"' % v for v in list_) + ']'
    vim.command('let g:' + varname + ' = ' + liststr)

if 1:
    import vimtk
    #import logging
    #logging.basicConfig()
    #logging.getLogger().setLevel(logging.DEBUG)
    vimtk.reload()
EOF

"Python2or3 << EOF
"import vimtk
"from distutils.version import LooseVersion
"if LooseVersion(vimtk.__version__) >= LooseVersion('0.1.1'):
"    from vimtk import jedi_monkeypatch
"    jedi_monkeypatch.apply_monkey_patch_jedi()
"else:
"    print('VIMTK VERSION TO OLD: vimtk.__version__ = {!r}'.format(vimtk.__version__))
"EOF
