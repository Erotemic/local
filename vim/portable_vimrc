source ~/local/vim/rc/win32_presource.vim

set encoding=utf8
"===========PLUGINS==========="
" PLUGIN: Pathogen
" Pathogen is the first thing to run
"filetype off

python << endpython
import vim
enabled = [
    'csv.vim',
    'grep.vim',
    'jedi-vim',
    'nerdcommenter',
    'nerdtree',
    'supertab',
    'syntastic',
    'vim-repeat',
    'vim-startify',
] 

# Add a plugin to this list to disable it 
disabled = [
    'Conque-Shell',
    'highlight.vim',
    'vim-airline',
    'vim-multiple-cursors',
    'vim-sensible',
    'vim-surround',
    'vim-unimpaired',
    'vim-vimtweak',
]
vim.command('let g:pathogen_disabled = ' + repr(disabled))
endpython

source ~/local/vim/vimfiles/autoload/pathogen.vim
execute pathogen#infect()
call pathogen#helptags()
"call pathogen#infect()
syntax on
filetype plugin indent on

" PLUGIN: External non-plugin source files
source ~/local/vim/rc/align.vim
source ~/local/vim/rc/enable_code_snippets.vim
source ~/local/vim/rc/custom_font_functions.vim
source ~/local/vim/rc/custom_misc_functions.vim
source ~/local/vim/rc/custom_pep8_functions.vim
source ~/local/vim/rc/custom_regex_functions.vim
source ~/local/vim/rc/custom_py_functions.vim
source ~/local/vim/rc/custom_tex_functions.vim
source ~/local/vim/rc/commands.vim

"===========Settings==========="
source ~/local/vim/rc_settings/plugin_settings.vim
source ~/local/vim/rc_settings/plugins_python.vim
source ~/local/vim/rc_settings/plugins_latex.vim
source ~/local/vim/rc_settings/gui_settings.vim
source ~/local/vim/rc_settings/behavior_settings.vim
source ~/local/vim/rc_settings/remap_funcs.vim
source ~/local/vim/rc_settings/remap_settings.vim
source ~/local/vim/rc_settings/autocommand_settings.vim


" Trial / project / temporary vimrc commands
" If they are good put them into a settings file

"___________________
" Quick File Access:
:call QUICKOPEN_leader_tvio(',', '~/local/vim/portable_vimrc')
:call QUICKOPEN_leader_tvio('0', '~/code/ibeis/ibeis/main_module.py')
:call QUICKOPEN_leader_tvio('1', '~/code/hesaff/pyhesaff/_pyhesaff.py')
:call QUICKOPEN_leader_tvio('2', '~/code/vtool/vtool/nearest_neighbors.py')
:call QUICKOPEN_leader_tvio('3', '~/code/guitool/guitool/api_item_model.py')
:call QUICKOPEN_leader_tvio('4', '~/local/init/ubuntu_core_packages.sh')
:call QUICKOPEN_leader_tvio('5', '~/local/bashrc.sh')
:call QUICKOPEN_leader_tvio('7', '~/local/vim/rc/custom_font_functions.vim')
:call QUICKOPEN_leader_tvio('6', '~/code/pyrf')
:call QUICKOPEN_leader_tvio('8', '~/code/flann/src/python/pyflann/flann_ctypes.py')
:call QUICKOPEN_leader_tvio('9', '~/local/misc/modulechanges.sh')

:call QUICKOPEN_leader_tvio('0', '~/local/vim/rc/custom_regex_commands.vim')
:call QUICKOPEN_leader_tvio('_', '$VIMRUNTIME/../_vimrc')
:call QUICKOPEN_leader_tvio('a', '~/code/ibeis/ibeis/all_imports.py')
:call QUICKOPEN_leader_tvio('b', '~/local/bashrc.sh')
:call QUICKOPEN_leader_tvio('c', '~/code/ibeis/ibeis/control/IBEISControl.py')
:call QUICKOPEN_leader_tvio('d', '~/code/ibeis/dev.py')
:call QUICKOPEN_leader_tvio('e', '~/code/ibeis/ibeis/dev/experiment_printres.py')
:call QUICKOPEN_leader_tvio('f', '~/code/ibeis/ibeis/ibsfuncs.py')
:call QUICKOPEN_leader_tvio('g', '~/code/ibeis/ibeis/gui/newgui.py')
:call QUICKOPEN_leader_tvio('h', '~/code/ibeis/ibeis/model/hots/match_chips4.py')
:call QUICKOPEN_leader_tvio('i', '~/code/ibeis/ibeis/model/hots/smk/smk_index.py')
:call QUICKOPEN_leader_tvio('j', '~/code/ibeis/ibeis/io/ingest_database.py')
:call QUICKOPEN_leader_tvio('k', '~/code/ibeis/ibeis/model/hots/smk/smk_core.py')
:call QUICKOPEN_leader_tvio('l', '~/latex/crall-lab-notebook/main.tex')
:call QUICKOPEN_leader_tvio('m', '~/code/ibeis/ibeis/model/hots/smk/smk_match.py')
:call QUICKOPEN_leader_tvio('n', '~/code/ibeis/ibeis/model/Config.py')
:call QUICKOPEN_leader_tvio('o', '~/code/ibeis/ibeis/model/preproc/preproc_image.py')
:call QUICKOPEN_leader_tvio('p', '~/code/plottool/plottool/__init__.py')
"q
:call QUICKOPEN_leader_tvio('r', '~/code/ibeis/ibeis/model/detect/randomforest.py')
:call QUICKOPEN_leader_tvio('s', '~/code/ibeis/ibeis/control/SQLDatabaseControl.py')
:call QUICKOPEN_leader_tvio('t', '~/code/ibeis/ibeis/tests')
:call QUICKOPEN_leader_tvio('u', '~/code/utool/utool/__init__.py')
:call QUICKOPEN_leader_tvio('v', '~/code/vtool/vtool/__init__.py')
"w
:call QUICKOPEN_leader_tvio('x', '~/code/ibeis/ibeis/viz/interact/interact_name.py')
:call QUICKOPEN_leader_tvio('y', '~/code/cyth/cyth/cyth_script.py')
:call QUICKOPEN_leader_tvio('z', '~/code/ibeis/ibeis/viz/viz_matches.py')
:call QUICKOPEN_leader_tvio('C', '~/Dropbox/crall')
":call QUICKOPEN_leader_tvio('P', '~/Dropbox/CVPR\ Paper/main.tex')
:call QUICKOPEN_leader_tvio('P', '~/latex/crall-cvpr-15/main.tex')

"call MagicPython()
":call QUICKOPEN_leader_tvio('n', '~/code/ibeis/notebook/')
":call QUICKOPEN_leader_tvio('2', '~/code/ibeis/ibeis/dev/params.py')
":call QUICKOPEN_leader_tvio('3', '~/code/guitool/guitool/guitool_components.py')
":call QUICKOPEN_leader_tvio('4', '~/code/ibeis/ibeis/dev/results_organizer.py')
":call QUICKOPEN_leader_tvio('e', '~/code/ibeis/ibeis/dev/experiment_harness.py')
":call QUICKOPEN_leader_tvio('e', '~/code/ibeis/ibeis/io/export_subset.py')
":call QUICKOPEN_leader_tvio('g', '~/code/ibeis/ibeis/gui/inspect_gui.py')


func! InsertDocstr() 
    if !exists("g:togfont") 
        let g:togfont=0
    endif
    python << endpython
import vim
import utool

# Get text posision
(row, col) = vim.current.window.cursor
# Text to insert into the current buffer

# Janky way to find function name
searchlines = []
def seach_for_funcname():
    for i in range(20):
        offset = (i / 2) * (-1 * (i % 2))
        searchline = vim.current.buffer[row + offset]
        clean = searchline.strip(' ')
        searchlines.append('SEARCHLINE ' + clean)
        if clean.startswith('def '):  # and clean.endswith(':'):
            rparen_pos = clean.find('(')
            if rparen_pos > 0:
                funcname = clean[4:rparen_pos].strip(' ')
                return funcname
  
funcname = seach_for_funcname()
dbgtext = ''

modname = utool.get_absolute_import(vim.current.buffer.name)
modname = modname.replace('.__init__', '').strip()

flag = False
docstr = ''
if funcname is None:
    funcname = '[vimerr] UNKNOWN_FUNC'
    flag = True
else:
    modname = modname
    docstr = utool.auto_docstr(modname, funcname, verbose=False)
    if docstr[:].strip() == 'error':
        flag = True
      
if flag:
    dbgtext = '\nDEBUGTEXT: modname=%r, funcname=%r\n' % (modname, funcname)
    dbgtext += '\n'.join(searchlines)

text = '\n'.join([docstr + dbgtext])
lines = [line.encode('utf-8') for line in text.split('\n')]

#+--------------
# Insertion Code
#+--------------
buffer_tail = vim.current.buffer[row:]  # Original end of the file
new_tail = lines + buffer_tail  # Prepend our data
del(vim.current.buffer[row:]) # delete old data
vim.current.buffer.append(new_tail) # append new data
#L______________
endpython
":ECHOVAR gfn
endfu 

:noremap <c-d> :call InsertDocstr()<CR>
:inoremap <c-d> :call InsertDocstr()<CR>

"vim.current.buffer[row:row + 1].append(lines)
"#vim.command('r~/%s' % fpath)
"#print(docstr)
"# utool.write_to(fpath, docstr)
"#vim.current.buffer[0] = "hello, world" # change first line
"#vim.current.buffer.append("last line!")
":let @" = expand("%")
"#"dbgtext += ' modname=' + modname + ' funcname=' + funcname
"#modname = 'utool.util_path'
"#funcname = 'get_module_dir'

"#print(utool.list_str(dir(vim.current.buffer)))
"#print('fpath=%r' % fpath)
"#vim.current.buffer[row:row + len(lines)].extend(lines)
"#for line in lines:
"#modname = 'ibeis.model.detect.randomforest'
"#funcname = 'compute_hough_images'
"#utool.rrrr()
"#"print(type(vim.current.buffer))
"#for _ in docstr.split('\n'):
"#    vim.current.buffer.append(_) 
"# Filename of the module we are in
"#vim.current.buffer.append(lines)
