if has("win32") || has("win16")
    :set runtimepath+=$USERPROFILE\local\vim\portable_vimrc 
endif
set runtimepath+=~/local/vim/vimfiles/
source ~/local/vim/rc/win32_presource.vim
source ~/local/vim/rc/venv_presource.vim
set encoding=utf8
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

" COMMON JUMP TO RC FILES
" ~/local/vim/rc/pyvim_funcs.py
" ~/local/vim/rc/custom_misc_functions.vim  
" ~/local/vim/rc/custom_py_functions.vim
" ~/local/vim/rc_settings/plugin_settings.vim
" ~/local/vim/rc_settings/plugins_latex.vim
" ~/local/vim/rc_settings/plugins_latex2.vim
" ~/local/vim/rc_settings/behavior_settings.vim
" ~/local/vim/rc_settings/remap_funcs.vim
" ~/local/vim/rc_settings/remap_settings.vim
" ~/local/vim/rc_settings/autocommand_settings.vim

" Spell Files
":e ~/local/vim/vimfiles/spell/en.utf-8.add
":e ~/local/vim/vimfiles/spell/en.latin1.add

" Syntax is based in:
" $VIMRUNTIME/syntax
":e $VIMRUNTIME/syntax/python.vim
":e $VIMRUNTIME/syntax/markdown.vim
":e ~/local/init/ensure_vim_plugins.py
":e ~/local/vim/rc_settings/remap_settings.vim
":e ~/local/vim/rc_settings/plugin_settings.vim
" source ~/local/vim/vimfiles/after/syntax/tex.vim
" source ~/local/vim/vimfiles/after/ftplugin/python/folding.vim 

" My plugins are grabbed from
" ~/local/init/REPOS1.py
" overloading happens in 
" ~/local/vim/vimfiles/after/syntax

" Snippets Directory
" ~/local/vim/vimfiles/UltiSnips/python.snippets

" My custom python syntax
source ~/local/vim/vimfiles/syntax/python.vim 

"===========PLUGINS==========="
" PLUGIN: Pathogen

if has('python')
    command! -nargs=1 Python2or3 python <args>
elseif has('python3')
    command! -nargs=1 Python2or3 python3 <args>
else
    echo "Error: Requires Vim compiled with +python or +python3"
    finish
endif

Python2or3 << EOF
import sys
import os
import vim

def get_disabled_plugins():
    """
    Returns a list of disabled plugin names

    SeeAlso:
        ~/local/init/ensure_vim_plugins.py
        # list of plugins are in
        ~/local/init/REPOS1.py
    """
    WIN32 = sys.platform.startswith('win32')
    UNIX = not WIN32
    flag = True

    # Set flag to be false to disable plugin
    known_plugins = [
        (flag, 'nerdtree'),

        (flag, 'nerdcommenter'),
        (flag, 'tagbar'),

        (flag & UNIX, 'supertab'),
        (flag & UNIX, 'vim-startify'),

        (flag & UNIX, 'syntastic'),
        (flag, 'jedi-vim'),
        (flag, 'LaTeX-Box'),
        (flag, 'vim-markdown'),
        (flag, 'vim-syntax-markdown'),
        (flag, 'vim-colors-solarized'),

        (flag, 'ultisnips'),
        (flag, 'vim-snippets'),
        (flag, 'vim-powerline'),
        (flag, 'vim-Powerline'),
        (flag, 'vim-virtualenv'),
        (flag, 'vim-autopep8'),

        (flag, 'AnsiEsc.vim'),
        (flag, 'rainbow_parentheses.vim'),
        (flag, 'closetag.vim'),
        (flag, 'unicode.vim'),
        (flag, 'gruvbox'),
        (flag, 'badwolf'),
        (flag, 'codeschool-vim-theme'),
        (flag, 'phd'),
        (flag & UNIX, 'taglist.vim'),  # ctags

        (False & UNIX, 'vim-buffergator'),
        (False, 'vim-ipython'), (False, 'vim-quickopen-tvio'),
        (False, 'vim-fugitive'), (False, 'csv.vim'), (False, 'grep.vim'), 
        (False, 'vim-repeat'), (False, 'Conque-Shell'),
        (False, 'highlight.vim'), (False, 'vim-airline'), 
        (False, 'vim-multiple-cursors'), (False, 'vim-sensible'), 
        (False, 'vim-surround'), (False, 'vim-unimpaired'),
        (False, 'vim-vimtweak'),
    ] 
    disabled = [name for flag, name in known_plugins if not flag]

    if True:
        enabled = [name for flag, name in known_plugins if flag]
        all_plugins = set(disabled + enabled)
        plugin_dirs = set(os.listdir(os.path.expanduser('~/local/vim/vimfiles/bundle')))
        unregistered_plugins = plugin_dirs - all_plugins
        if len(unregistered_plugins) > 0:
            print('Warning: portable_vimrc found unregistered plugin(s) = %r' %
                (unregistered_plugins,))
    return disabled

disabled = get_disabled_plugins()
disabled_str = '[' + (', '.join(['"%s"' % (name,) for name in disabled])) + ']'

vim.command('let g:pathogen_disabled = ' + disabled_str)
EOF

":ECHOVAR runtimepath
"# http://stackoverflow.com/questions/6639786/pathogen-vim-non-default-bundle-directory-location
:set nocp  " https://github.com/tpope/vim-pathogen/issues/50
source ~/local/vim/vimfiles/autoload/pathogen.vim
":call pathogen#runtime_append_all_bundles('bundle')
":call pathogen#incubate('bundle/{}')
:call pathogen#infect('bundle/{}')
"execute pathogen#infect()
"call pathogen#helptags()
"call pathogen#infect()
syntax on
filetype plugin indent on


" PLUGIN: External non-plugin source files
source ~/local/vim/rc/align.vim
source ~/local/vim/rc/enable_code_snippets.vim
source ~/local/vim/rc/custom_font_functions.vim
source ~/local/vim/rc/custom_misc_functions.vim  
source ~/local/vim/rc/custom_py_functions.vim

"===========Settings==========="
source ~/local/vim/rc_settings/plugin_settings.vim
source ~/local/vim/rc_settings/behavior_settings.vim
source ~/local/vim/rc_settings/remap_funcs.vim
source ~/local/vim/rc_settings/remap_settings.vim
source ~/local/vim/rc_settings/autocommand_settings.vim
"source ~/local/vim/rc_settings/plugins_latex.vim
source ~/local/vim/rc_settings/plugins_latex2.vim


let g:vim_markdown_math = 1
let g:vim_markdown_folding_style_pythonic = 1

" Trial / project / temporary vimrc commands
" If they are good put them into a settings file
"___________________
" Quick File Access:

func! QUICKOPEN_leader_tvio(...)
    " TODO: remove for plugin
    " Maps <leader>t<key> to tab open a filename
    " Maps <leader>s<key> to vsplit open a filename
    " Maps <leader>i<key> to split open a filename
    let key = a:1
    let fname = a:2
    :exec 'noremap <leader>t'.key.' :tabe '.fname.'<CR>'
    :exec 'noremap <leader>v'.key.' :vsplit '.fname.'<CR>'
    :exec 'noremap <leader>i'.key.' :split '.fname.'<CR>'
    :exec 'noremap <leader>o'.key.' :e '.fname.'<CR>'
endfu

call QUICKOPEN_leader_tvio(',', '~/local/vim/portable_vimrc')
call QUICKOPEN_leader_tvio('>', '~/code/flann/src/python/pyflann/index.py')
call QUICKOPEN_leader_tvio('.', '~/code/flann/src/cpp/flann/algorithms/nn_index.h')
call QUICKOPEN_leader_tvio('<', '~/local/vim/rc/pyvim_funcs.py')
call QUICKOPEN_leader_tvio('/', '~/code/ibeis_cnn')
call QUICKOPEN_leader_tvio('!', '~/local/vim/rc/pyvim_funcs.py')
call QUICKOPEN_leader_tvio('*', '~/code/hesaff/pyhesaff/_pyhesaff.py')
call QUICKOPEN_leader_tvio('1', '~/code/ibeis/ibeis/control/manual_annot_funcs.py')
call QUICKOPEN_leader_tvio('2', '~/local/scripts/register_files.py')
call QUICKOPEN_leader_tvio('@', '~/code/mtgmonte/mtgmonte.py')
"call QUICKOPEN_leader_tvio('3', '~/code/guitool/guitool/api_item_model.py')
call QUICKOPEN_leader_tvio('3', '~/code/guitool/guitool/guitool_components.py')
call QUICKOPEN_leader_tvio('4', '~/local/init/ubuntu_core_packages.sh')
call QUICKOPEN_leader_tvio('$', '~/local/build_scripts/')
call QUICKOPEN_leader_tvio('5', '~/local/homelinks/bashrc')
call QUICKOPEN_leader_tvio('7', '~/local/vim/rc/custom_font_functions.vim')
call QUICKOPEN_leader_tvio('^', '~/code/Lasagne')
call QUICKOPEN_leader_tvio('6', '~/code/scikit-learn/sklearn/')
call QUICKOPEN_leader_tvio('8', '~/code/hesaff/src/hesaff.cpp')
call QUICKOPEN_leader_tvio('9', '~/local/misc/modulechanges.sh')

call QUICKOPEN_leader_tvio('0', '~/local/vim/rc/custom_regex_commands.vim')
call QUICKOPEN_leader_tvio('_', '$VIMRUNTIME/../_vimrc')
call QUICKOPEN_leader_tvio('A', '~/code/ibeis/ibeis/expt/annotation_configs.py')
call QUICKOPEN_leader_tvio('a', '~/code/ibeis/ibeis/core_annots.py')
"call QUICKOPEN_leader_tvio('b', '~/code/pgmpy/pgmpy/factors/Factor.py')
call QUICKOPEN_leader_tvio('b', '~/code/scikit-learn/sklearn/cluster/k_means_.py')
call QUICKOPEN_leader_tvio('8', '~/code/hesaff/src/hesaff.cpp')
call QUICKOPEN_leader_tvio('b', '~/code/pgmpy/pgmpy/factors/Factor.py')
call QUICKOPEN_leader_tvio('B', '~/code/ibeis_cnn/ibeis_cnn/models/abstract_models.py')
call QUICKOPEN_leader_tvio('c', '~/code/ibeis/ibeis/control/IBEISControl.py')
call QUICKOPEN_leader_tvio('C', '~/code/ibeis/ibeis/core_annots.py')
call QUICKOPEN_leader_tvio('D', '~/code/')
call QUICKOPEN_leader_tvio('db', '~/code/dtool/dtool/base.py')
call QUICKOPEN_leader_tvio('ds', '~/code/dtool/dtool/sql_control.py')
call QUICKOPEN_leader_tvio('dc', '~/code/dtool/dtool/depcache_control.py')
call QUICKOPEN_leader_tvio('d ', '~/code/dtool/dtool/depcache_control.py')
call QUICKOPEN_leader_tvio('de', '~/code/dtool/dtool/example_depcache.py')
call QUICKOPEN_leader_tvio('dt', '~/code/dtool/dtool/depcache_table.py')
call QUICKOPEN_leader_tvio('e', '~/code/ibeis/ibeis/expt/experiment_drawing.py')
call QUICKOPEN_leader_tvio('ed', '~/code/ibeis/ibeis/expt/experiment_drawing.py')
call QUICKOPEN_leader_tvio('eh', '~/code/ibeis/ibeis/expt/harness.py')
call QUICKOPEN_leader_tvio('ep', '~/code/ibeis/ibeis/expt/experiment_printres.py')
call QUICKOPEN_leader_tvio('tr', '~/code/ibeis/ibeis/expt/test_result.py')
call QUICKOPEN_leader_tvio('E', '~/code/ibeis/ibeis/expt/experiment_configs.py')
call QUICKOPEN_leader_tvio('f', '~/code/ibeis/ibeis/other/ibsfuncs.py')
call QUICKOPEN_leader_tvio('F', '~/code/ibeis/ibeis/init/filter_annots.py')
call QUICKOPEN_leader_tvio('g', '~/code/ibeis/ibeis/gui/inspect_gui.py')
call QUICKOPEN_leader_tvio('G', '~/code/ibeis/ibeis/gui/newgui.py')
""""""""""""""
call QUICKOPEN_leader_tvio('H', '~/code/ibeis/ibeis/algo/hots/match_chips4.py')
call QUICKOPEN_leader_tvio('h', '~/code/ibeis/ibeis/algo/hots/graph_iden.py')
""""""""""""""
call QUICKOPEN_leader_tvio('i', '~/code/ibeis/ibeis/__init__.py')
call QUICKOPEN_leader_tvio('I', '~/code/ibeis/ibeis/other/dbinfo.py')
call QUICKOPEN_leader_tvio('j', '~/code/ibeis/ibeis/dbio/export_subset.py')
call QUICKOPEN_leader_tvio('J', '~/local/vim/vimfiles/bundle/jedi-vim/jedi_vim.py')
"call QUICKOPEN_leader_tvio('k', '~/code/ibeis/ibeis/algo/hots/chip_match.py')
call QUICKOPEN_leader_tvio('K', '~/code/ibeis-flukematch-module/ibeis_flukematch/plugin.py')
call QUICKOPEN_leader_tvio('k', '~/code/ibeis/ibeis/algo/smk/smk_pipeline.py')
"call QUICKOPEN_leader_tvio('l', '~/latex/crall-thesis-2017/main.tex')
call QUICKOPEN_leader_tvio('l', '~/latex/crall-iccv-2017/main.tex')
call QUICKOPEN_leader_tvio('L', '~/latex/crall-thesis-2017/sec-3-4-expt.tex')
call QUICKOPEN_leader_tvio('m', '~/code/ibeis/ibeis/init/main_helpers.py')
call QUICKOPEN_leader_tvio('M', '~/code/ibeis/ibeis/main_module.py')
""""""""""""""
call QUICKOPEN_leader_tvio('n', '~/code/ibeis/ibeis/algo/Config.py')
"call QUICKOPEN_leader_tvio('N', '~/code/ibeis/ibeis/algo/hots/score_normalization.py')
call QUICKOPEN_leader_tvio('N', '~/code/ibeis_cnn/ibeis_cnn/custom_layers.py')
""""""""""""""
call QUICKOPEN_leader_tvio('o', '~/code/ibeis/ibeis/algo/preproc/preproc_annot.py')
call QUICKOPEN_leader_tvio('O', '~/code/ibeis/ibeis/algo/preproc/preproc_chip.py')
""""""""""""""
call QUICKOPEN_leader_tvio('p', '~/code/plottool/plottool/__init__.py')
call QUICKOPEN_leader_tvio('P', '~/code/plottool/plottool/draw_func2.py')
""""""""""""""
call QUICKOPEN_leader_tvio('q', '~/code/ibeis/ibeis/algo/hots/query_request.py')
call QUICKOPEN_leader_tvio('Q', '~/code/ibeis/ibeis/algo/hots/hots_query_result.py')
""""""""""""""
call QUICKOPEN_leader_tvio('r', '~/code/ibeis/ibeis/expt/experiment_storage.py')
call QUICKOPEN_leader_tvio('R', '~/code/ibeis/README.md')
"call QUICKOPEN_leader_tvio('s', '~/code/ibeis/ibeis/scripts/gen_cand_expts.py')
"call QUICKOPEN_leader_tvio('s', '~/code/ibeis/ibeis/scripts/specialdraw.py')
"call QUICKOPEN_leader_tvio('s', '~/code/ibeis/ibeis/scripts/classify_shark.py')
call QUICKOPEN_leader_tvio('s', '~/code/ibeis/ibeis/scripts/script_vsone.py')
call QUICKOPEN_leader_tvio('S', '~/code/ibeis/setup.py')
call QUICKOPEN_leader_tvio('t', '~/code/ibeis/ibeis/templates/generate_notebook.py')
call QUICKOPEN_leader_tvio('T', '~/code/ibeis/ibeis/tag_funcs.py')
call QUICKOPEN_leader_tvio('u', '~/code/utool/utool/__init__.py')
call QUICKOPEN_leader_tvio('U', '~/code/utool/utool/util_dev.py')
call QUICKOPEN_leader_tvio('v', '~/code/vtool/vtool/__init__.py')
call QUICKOPEN_leader_tvio('V', '~/code/vtool/vtool/spatial_verification.py')
call QUICKOPEN_leader_tvio('V', '~/code/vtool/vtool/coverage_image.py')
call QUICKOPEN_leader_tvio('W', '~/code/ibeis_cnn/ibeis_cnn/models/abstract_models.py')
call QUICKOPEN_leader_tvio('w', '~/code/ibeis/ibeis/web/apis_query.py')
call QUICKOPEN_leader_tvio('x', '~/code/ibeis/ibeis/viz/interact/interact_name.py')
call QUICKOPEN_leader_tvio('X', '~/code/ibeis/ibeis/algo/hots/multi_index.py')
call QUICKOPEN_leader_tvio('y', '~/code/ibeis/ibeis/algo/hots/vsone_pipeline.py')
call QUICKOPEN_leader_tvio('Y', '~/code/cyth/cyth/cyth_script.py')
call QUICKOPEN_leader_tvio('z', '~/code/ibeis/ibeis/viz/viz_graph2.py')
call QUICKOPEN_leader_tvio('Z', '~/code/ibeis/ibeis/algo/hots/neighbor_index.py')


if has("win32") || has("win16")
    " Try to hack windows to recognize the custom syntax
    " Seems to work. Thank god.
    autocmd Filetype tex,latex source $USERPROFILE\local\vim\vimfiles\after\syntax\tex.vim
endif
        
"syntax sync minlines=500
"set visualbell
"set noeb vb t_vb=
"
"

function! MathAndLiquid()
    " http://scottsievert.com/blog/2016/01/06/vim-jekyll-mathjax/
    "" Define certain regions
    " Block math. Look for "$$[anything]$$"
    syn region math start=/\$\$/ end=/\$\$/
    " inline math. Look for "$[not $][anything]$"
    syn match math_block '\$[^$].\{-}\$'

    " Liquid single line. Look for "{%[anything]%}"
    syn match liquid '{%.*%}'
    " Liquid multiline. Look for "{%[anything]%}[anything]{%[anything]%}"
    syn region highlight_block start='{% highlight .*%}' end='{%.*%}'
    " Fenced code blocks, used in GitHub Flavored Markdown (GFM)
    syn region highlight_block start='```' end='```'

    "" Actually highlight those regions.
    hi link math Statement
    hi link liquid Statement
    hi link highlight_block Function
    hi link math_block Function
    setlocal spell
endfunction

" Call everytime we open a Markdown file
autocmd BufRead,BufNewFile,BufEnter *.md,*.markdown call MathAndLiquid()

"if has("unix")
"    execute "!mkdir -p ~/.vim/files/info"
"endif


" mkdir -p ~/.vim/files/info
:set viminfo='100,n$HOME/.vim/files/info/viminfo
let g:startify_bookmarks = ['~/.vimrc', '~/.bashrc']
Python2or3 << EOF
listvars = {
    'startify_bookmarks': [
        '~/local/vim/portable_vimrc',
        '~/.bashrc',
        '~/code/scikit-learn/sklearn/cluster/k_means.py',
        '~/code/ibeis/ibeis/algo/hots/vsone_pipeline.py',
        '~/code/vtool/vtool/matching.py'
    ]
}
for varname, list_ in listvars.items():
    liststr = '[' + ', '.join('"%s"' % v for v in list_) + ']'
    vim.command('let g:' + varname + ' = ' + liststr)
EOF
