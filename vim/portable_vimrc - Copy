"============ TOP LEVEL COMMANDS ================"
" Some of these probably need to be cleaned up
syntax on
filetype plugin indent on
" MISC: win clipboard on linux
if has("win32") || has("win16")
else
    source $VIMRUNTIME/mswin.vim
endif

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set ff=unix
set ffs=unix,dos
if has("win32") || has("win16")
    set backupdir=D:/sys/vim_tmp/
    set undodir=D:/sys/vim_tmp/
else
    set backupdir=/media/Store/sys/vim_tmp/
    set undodir=/media/Store/sys/vim_tmp/
endif
set nobackup
set autochdir

set nomousehide
set nowb
set noswapfile
" Do not open these sort of files
set wildignore=*.o,*~,*.pyc,*.aux,*.masv,*.bbl,*.bcf,*.blg,*.brf,*.synctex,*.upa,*.upb,*.pdf

" Remap the leader key from \ to ,
let mapleader = ","

" Setting Font Functions
fu! SetFontMonoDyslexic()
    if has("win32") || has("win16")
        set gfn=Mono\ Dyslexic:h11
    else
        set guifont=MonoDyslexic
    endif
endfu

fu! SetFontDefault()
    if has("win32") || has("win16")
        set gfn=Fixedsys:h9
    else
        set guifont=Monospace
    endif
endfu

"===========PLUGINS==========="
" PLUGIN: External non-plugin source files
source $PORT_SETTINGS/vim/align.vim
"source $PORT_SETTINGS/vim/re_matlab2python.vim
"-------------------------
" PLUGIN: Pathogen
source $PORT_SETTINGS/vim/vimfiles/autoload/pathogen.vim
execute pathogen#infect()
"-------------------------
" PLUGIN: NERDTree 
"
" LATEX MODE
let NERDTreeIgnore = ['\.o$','\~$','\.pyc$','\.aux$','\.masv$','\.bbl$','\.bcf$','\.blg$','\.brf$','\.synctex$','\.upa$','\.upb$','\.pdf$','\.out$','\.log','\.latexmain','\.bib','\.bat*$','\.bst$']

"-------------------------
" PLUGIN: JEDI 
let g:jedi#popup_on_dot = 0
let g:jedi#show_function_definition = 0
command! JediShowFuncOn :let g:jedi#show_function_definition = 1
command! JediShowFuncOff :let g:jedi#show_function_definition = 0
command! JediDotPopOn :let g:jedi#popup_on_dot = 1
command! JediDotPopOff :let g:jedi#popup_on_dot = 0
"-------------------------
" PLUGIN: Supertab
" python autocomplete for supertab
au! FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"
au! FileType python set nosmartindent
au! FileType python filetype indent on
au! FileType python set textwidth=80

func! SpellcheckOn()
    :set spell
    :setlocal spell spelllang=en_us
endfu

" =========== LATEX =========== "
" LATEX: Initialization
au! BufNewFile,BufRead *.tex call LatexInitialize() 
func! LatexInitialize()
    :set textwidth=80
    :set spell
    :setlocal spell spelllang=en_us
    :call SetFontMonoDyslexic()
    set wildignore=*.o,*~,*.pyc,*.aux,*.masv,*.bbl,*.bcf,*.blg,*.brf,*.synctex,*.upa,*.upb,*.pdf,*.out,*.log
    let NERDTreeIgnore = ['\.o$','\~$','\.pyc$','\.aux$','\.masv$','\.bbl$','\.bcf$','\.blg$','\.brf$','\.synctex$','\.upa$','\.upb$','\.pdf$','\.out$','\.log','\.latexmain','\.bib']
    
endfu
"-------------------------
" LATEX: Unsorted Preferences
set shellslash
set grepprg=grep\ -nH\ $*
let g:Tex_SmartKeyDot=0
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_MultipleCompileFormats='pdf'
let g:Tex_CompileRule_pdf = 'pdflatex -shell-escape --synctex=-1 -src-specials -interaction=nonstopmode $*'
"-------------------------
" LATEX: Cross Platform view rules
if has("win32") || has("win16")
    let g:Tex_ViewRule_pdf = 'C:\Program Files (x86)\SumatraPDF\SumatraPDF -reuse-instance -inverse-search "gvim -c \":RemoteOpen +\%l \%f\""'
else
    let g:Tex_ViewRule_pdf = 'okular --unique'
endif
"-------------------------
" LATEX: Use main.tex.mainfile to compile
let g:Tex_UseMakefile = 1
"-------------------------
" LATEX: Compile Command Remaps
nnoremap <Leader>p :call Tex_RunViewLaTeX()<CR>
nmap <C-P> :call Tex_RunViewLaTeX() <CR>
imap <C-P> :call Tex_RunViewLaTeX() <CR>
map <F8> :call  Tex_RunViewLaTeX()<CR>  
func! Tex_RunViewLaTeX()
    call Tex_RunLaTeX()
    call Tex_ViewLaTeX()
endfu

"-------------------------
" LATEX: Toggle Compile to OpenDyslexic

func! SetLaTeX()
    let g:Tex_CompileRule_pdf = 'pdflatex -shell-escape --synctex=-1 -src-specials -interaction=nonstopmode $*'
endfu   

func! SetXeTeX()
    let g:Tex_CompileRule_pdf = 'xelatex -shell-escape -interaction=nonstopmode $*'
endfu   

command! LATEXCompileRuleLaTeX :call SetLaTeX()
command! LATEXCompileRuleXeTeX :call SetXeTeX()
"-------------------------
"Latex: Turn of XeLaTeX errors
set makeprg=texwrapper
set errorformat=%f:%l:%c:%m
"-------------------------
"Latex: Turn off code folding
:let Tex_FoldedSections=""
:let Tex_FoldedEnvironments=""
:let Tex_FoldedMisc=""
" =========== MISC  ==========="
imap bufloadpy :args *.py
"-------------------------
" MISC: win clipboard on linux
if has("win32") || has("win16")
else
    set clipboard=unnamedplus
endif
"-------------------------
command! HexmodeOn :%!xxd
command! HexmodeOff :%!xxd -r 
"-------------------------
"http://vim.wikia.com/wiki/Converting_variables_to_or_from_camel_case
nnoremap <Leader>q :call UnderscoresToCamelCase()<CR>
command! CamelCase :call UnderscoresToCamelCase()
func! UnderscoresToCamelCaseFirstUp()
    " Convert each name_like_this to NameLikeThis in current line.
    :s#\(\%(\<\l\+\)\%(_\)\@=\)\|_\(\l\)#\u\1\2#g
endfu
func! UnderscoresToCamelCase()
    " Convert each name_like_this to nameLikeThis in current line.
    :s#_\(\l\)#\u\1#g
endfu
"-------------------------
"BIBTEX PAPERS
command! BIBSPACE :call CopyiedRefsSpacings()
func! CopyiedRefsSpacings()
    %s/\([^\r]\)\[/\r\[/g
    %s/\(\<[^ ]\+\>\)- \(\<[^ ]\+\>\)/\1\2/g
endfu
"-------------------------
func! ToCamelCase()
    %s/\<\([a-zA-Z_]*\)_bit/is_\1/gc
    %s/_\([a-zA-Z]\)\([a-zA-Z]*\)/\U\1\L\2/gc
endfu


" ========= VIM PREFERENCES ========= "
if has("gui_running")
    colorscheme synic
endif
au! SwapExists * let v:swapchoice = 'e'
set shiftwidth=4
set tabstop=4
set expandtab
set cino={1s
set autoread
set lbr " Linebreak on 500 characters
set tw=500
set ai "Auto indent
set si "Smart indent
"-------------------------
" Vim: Gray Line Numbering
:set nu 
if has("gui_running")
    :highlight LineNr guifg=#333333
    " Cross platform fonts
    if has("win32") || has("win16")
        :highlight LineNr font='Fixedsys'
    else
        :highlight LineNr font='Monospace'
    endif
endif
"-------------------------
"Map Ctrl+W (navkey) to Ctrl+(navkey) (for split windows)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
"-------------------------
"Filebar
:set go+=r go+=R go-=l go-=L
"-------------------------
"Windows start command
command! S :call OpenWindow()
command! CMD :ConqueTerm cmd 
command! CMD2 :ConqueTermTab cmd 
command! -nargs=1 R :vertical resize <f-args>
"-------------------------
" Function Remaps
map <F1> :call  ToggleWordHighlight()<CR> 
map <F2> :call  ToggleAlpha()<CR> 
map <F3> :call  ToggleFont()<CR> 
map <F4> :call  OpenWindow()<CR> 
map <F5> :call  CmdHere()<CR> 
"vim-latex-suit overwrites f5, give it an alt
map <F6> :call  CmdHere()<CR>  

"-------------------------
"Make txx file work as cpp files
autocmd BufNewFile,BufRead *.txx  set ft=cpp
autocmd BufNewFile,BufRead *.poly set ft=cmake
autocmd BufNewFile,BufRead *.spec set ft=python
autocmd BufNewFile,BufRead *.node set ft=cmake
autocmd BufNewFile,BufRead *.ele  set ft=cmake
autocmd BufNewFile,BufRead *.ahk, set ft=Autohotkey
"Read vidtk config files as vidtk config file
autocmd BufRead,BufNewFile *.conf setfiletype vidtkconf

" ========= Functions ========= "
"-------------------------
function! OpenWindow()
    if has("win32") || has("win16")
        silent !explorer .
    else
        silent !nautilus .&
    endif
    redraw!
endfunction
"-------------------------
function! CmdHere()
    if has("win32") || has("win16")
        silent !cmd /c start cmd
    else
        silent !gnome-terminal .
    endif
    redraw!
endfunction
"-------------------------
func! ToggleFont() 
    if !exists("g:togfont") 
        let g:togfont=1
    else 
        let g:togfont = 1 - g:togfont 
    endif 
    if (g:togfont)
        :call SetFontMonoDyslexic()
    else 
        :call SetFontDefault()
    endif 
endfu 
"-------------------------

"":autocmd CursorMoved * exe printf('match DiffChange /\V\<%s\>/', escape(expand('<cword>'), '/\'))
:autocmd CursorMoved * call WordHighlightFun()

func! WordHighlightFun()
    if !exists("g:togwordhighlight") 
        let g:togwordhighlight=0
    end
    if (g:togwordhighlight)     
        exe printf('match DiffChange /\V\<%s\>/', escape(expand('<cword>'), '/\'))
    endif
endfu

func! ToggleWordHighlight()
    if !exists("g:togwordhighlight") 
        let g:togwordhighlight=1 
    else 
        let g:togwordhighlight = 1 - g:togwordhighlight 
    endif 
endfu
"-------------------------


func! ToggleAlpha() 
    if !exists("g:togalpha") 
        let g:togalpha=1 
    else 
        let g:togalpha = 1 - g:togalpha 
    endif 
    if has("win32") || has("win16")
        if (g:togalpha) 
            call libcallnr("vimtweak.dll", "SetAlpha", 200) 
        else 
            call libcallnr("vimtweak.dll", "SetAlpha", 255) 
        endif 
    endif
endfu 

func! BeginAlpha() 
    if !exists("g:togalpha") 
        let g:togalpha=1 
        if has("win32") || has("win16") 
            call libcallnr("vimtweak.dll", "SetAlpha", 240) 
        endif
    endif
endfu 
"-------------------------

" End of script stuff. Needs to be cleaned up

":call ToggleFont()
:call SetFontMonoDyslexic()

"Windows symlink problems
set bkc=yes
set nobackup 
set nowritebackup

" NEW QUICK INCREASE FONT STUFF
function! AdjustFontSize(amount)
    "                     part1       part2      part3
    let font_pattern = '^\(.*\):h\([0-9][0-9]*\)\(.*$\)'
    let min_sz = 6
    let max_sz = 16
    if has("gui_running")
        let oldfont = substitute(&guifont, font_pattern, '\1', '')
        let cursize = substitute(&guifont, font_pattern, '\2', '')
        let newsize = cursize + a:amount
        if (newsize >= min_sz) && (newsize <= max_sz)
            let newfont = oldfont . ':h' . newsize
            let &guifont = newfont
        endif
    else
        echoerr "This only works in a gui"
    endif
endfunction

function! FontIncrease()
    call AdjustFontSize(1)
endfunction
command! FontIncrease call FontIncrease()

function! FontDecrease()
    call AdjustFontSize(-1)
endfunction
command! FontDecrease call FontDecrease()


" Textwidth command
command! TextWidth80 set textwidth=80


function! FUNC_TextWidthMarkerOn()
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
highlight OverLength ctermbg=red ctermfg=white guibg=#502020
match OverLength /\%81v.\+/
endfunction
command! TextWidthMarkerOn call FUNC_TextWidthMarkerOn()


function! FUNC_TextWidthLineOn()
if exists('+colorcolumn')
  set colorcolumn=81
else
  au! BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
endfunction
command! TextWidthLineOn call FUNC_TextWidthLineOn()


" -------------- Commands I use A Lot -------------
"
"
"
"http://vim.wikia.com/wiki/VimTip1572
" Remove highlight for visual selection (if any), or current word.
":Hclear
"" Remove highlight 24.
":Hclear 24
"" Remove all highlights for pattern '\c\<th'.
":Hclear \c\<th
"" Remove all highlights.
":Hclear *


fu! FUNC_BadCapsSearch()
    :/[^.}] *\n *[A-Z]\|[^\.]  *[A-Z]
    :Highlight 7 [^.}] *\n *[A-Z]\|[^\.]  *[A-Z]
    :Hclear [^.}] *\n
endfu

"perl -pi -e 's/[[:^ascii:]]//g' wiki_scale_list.py

fu! FUNC_MYCOMMAND()

endfu

fu! FUNC_REPLACE_BACKSLASH()
    :s/\\/\//g
endfu

fu! FUNC_SELPAPER()
    "Select 2 lines, Delete move to next window paste move back 
    :d3
    :wincmd l
    :put
    :wincmd h
endfu
nnoremap <Leader>f :call FUNC_SELPAPER()<CR>

fu! FUNC_FIX_PRINT()
    :s/^\( *\)print *\([^(]\)\(.*\)$/\1print(\2\3)
endfu
command! FIXPRINT :call FUNC_FIX_PRINT()<CR>

fu! FUNC_np_Style_Check(npcmd)
    let npcmdstr=a:npcmd
    :execute '%s/\([^.a-zA-Z]\)\(\<'.npcmdstr.'\>\)/\1np.\2/gc'
endfu

fu! FUNC_np_Style_NoCheck(npcmd)
    let npcmdstr=a:npcmd
    :execute '%s/\([^.a-zA-Z]\)\(\<'.npcmdstr.'\>\)/\1np.\2/g'
endfu

fu! FUNC_np_FIX_COMMON()
    :call FUNC_np_Style_NoCheck("array")
    :call FUNC_np_Style_NoCheck("load")
    :call FUNC_np_Style_NoCheck("savez")
    :call FUNC_np_Style_NoCheck("asarray")
    :call FUNC_np_Style_NoCheck("append")
    :call FUNC_np_Style_NoCheck("zeros")
    :call FUNC_np_Style_NoCheck("ones")
    :call FUNC_np_Style_NoCheck("empty")
    :call FUNC_np_Style_NoCheck("uint32")
    :call FUNC_np_Style_NoCheck("bool")
    :call FUNC_np_Style_NoCheck("sum")
    :call FUNC_np_Style_NoCheck("linalg")
    :call FUNC_np_Style_NoCheck("float32")
    :call FUNC_np_Style_NoCheck("bitwise_or")
    :call FUNC_np_Style_NoCheck("iterable")
endfu

" code folding 
set nofoldenable
set foldmethod=indent
set foldnestmax=1
set foldlevel=1

" why wont this work
set nosmartindent
highlight Cursor guifg=blue guibg=orange

" make semicolon command mode
nmap ; :

" Reloads vimrc on save
"autocmd BufWritePost portable_vimrc source %

" CVS SORT
" :sort/^[^,]*,/|g/^[^,]*,\([^,]*\),.*\n[^,]*,\1,.*/d_
" http://stackoverflow.com/questions/10237612/sort-u-but-only-on-one-column-in-a-csv
"
" sort n/^[^,]*,/
"
" sort n/.*\%3v/


" The last command entered with ':' can be repeated with @: and further repeats can be done with @@
"This is useful for commands like :bnext or :cNext.
