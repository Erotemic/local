'''
The idea of this file is to parse bash scripts and
convert them into their windows equivelant
'''
from os.path import expanduser, join, normpath
from pyparsing import Suppress, delimitedList, Word, alphas, alphanums, LineEnd, ZeroOrMore, OneOrMore
#from hscom import helpers


LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK, SEMI = map(Suppress, '{}()[];')

ident = Word(alphas + alphanums + "_-")

tolken = Word(alphas + alphanums + "\",.<>?:;'$()!@#$%^&*`~/_-")

NL_OPT = ZeroOrMore(LineEnd().suppress())
NL = OneOrMore(LineEnd().suppress())

line = Word(alphas + alphanums + "\",.<>?:;'$()!@#$%^&*` ~/_-")

statementDefn = (line)
#statementDefn = (ident('keyword') + ZeroOrMore(tolken)("args"))
#Regex('.*')


funcHeader = ident("func_name") + LPAREN + RPAREN + ZeroOrMore(LineEnd()) + LBRACE
funcBody   = delimitedList(statementDefn, NL)("statement_list")
funcFooter = NL_OPT + RBRACE

funcDefn = (funcHeader + funcBody + funcFooter)


bash_fpath = expanduser('~/local/git_helpers.sh')

with open(bash_fpath, 'r') as file_:
    bash_text = file_.read()


func_dict = {}
# Parse the bash script
for tplt in funcDefn.searchString(bash_text):
    func_dict[tplt.func_name] = tplt.statement_list


# Write out in bat format
bat_dir = normpath(expanduser('~/local/windows/auto_scripts'))
bat_comment = ':: '
#timestamp = helpers.get_timestamp()
timestamp = 'NA'
for func_name, statements in func_dict.iteritems():
    bat_fname = join(bat_dir, func_name + '.bat')
    bat_body = '\n'.join(statements)
    bat_list = [
        bat_comment + '-------',
        bat_comment + ' This file was autogenerated on %s' % timestamp,
        bat_comment + bat_fname,
        bat_comment + '------',
        bat_body
    ]
    bat_text = '\n'.join(bat_list)
    bat_text = bat_text.replace(' ~/', ' %USERPROFILE%/')
    print('')
    print(bat_text)
    with open(bat_fname, 'w') as file_:
        file_.write(bat_text)
