#!/bin/sh

# DEBUG WHERE SOMETHING CAME FROM
#set -x
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
    source /etc/profile.d/vte.sh
fi

export QT_ACCESSIBILITY=0
export QT_API=pyqt

#export PYTHONWARNINGS="once"
#export PYTHONWARNINGS="default"

#echo << EOF
## There are a few places where environment variables are set before .bashrc
## They are:
## /etc/environment
## /etc/bash.bashrc
#EOF 

# I don't know why this is populated to begin with
#echo "PATH(pre-bashrc) = $PATH"
#export PATH=""
#export PATH="$PATH:~/bin"
#export PATH="$PATH:/usr/local/sbin:/usr/local/bin"
#export PATH="$PATH:/usr/sbin:/usr/bin:/sbin:/bin"
#export PATH="$PATH:/usr/games:/usr/local/games:/snap/bin"

#export CC=gcc
#export CXX=g++
#export CC=/usr/bin/clang-4.0
#export CXX=/usr/bin/clang++-4.0


export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH

export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=~/bin:$PATH

#export PKG_CONFIG_PATH=~/.local/lib/pkgconfig:$PKG_CONFIG_PATH
#export LD_LIBRARY_PATH=~/.local/lib:$LD_LIBRARY_PATH
#export PATH=~/.local/bin:$PATH

export PATH=$PATH:~/scripts


# My standard environment variables
if [[ "$HOSTNAME" == "ibeis.cs.uic.edu"  ]]; then 
    export CODE_DIR=/opt/ibeis
elif [[ "$HOSTNAME" == "pachy.cs.uic.edu"  ]]; then 
    export CODE_DIR=/opt/ibeis
else
    export CODE_DIR=~/code
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    export NCPUS=$(sysctl -n hw.ncpu)
    #source ~/local/homelinks/helpers/bashrc_mac.sh
else
    export NCPUS=$(grep -c ^processor /proc/cpuinfo)
    source ~/local/homelinks/helpers/bashrc_ubuntu
fi

source ~/local/homelinks/helpers/git_helpers
source ~/local/homelinks/helpers/alias_helpers.sh
source ~/local/init/utils.sh



#export OMP_NUM_THREADS=7
 
permit_erotemic_gitrepo()
{ 
    #permit_gitrepo -i
    sed -i 's/https:\/\/github.com\/Erotemic/git@github.com:Erotemic/' .git/config
    sed -i 's/https:\/\/github.com\/WildbookOrg/git@github.com:WildbookOrg/' .git/config
    #sed -i 's/https:\/\/github.com\/bluemellophone/git@github.com:bluemellophone/' .git/config
    #sed -i 's/https:\/\/github.com\/zmjjmz/git@github.com:zmjjmz/' .git/config
    #sed -i 's/https:\/\/github.com\//git@github.com:' .git/config
}


# set history to not ignore leading whitespace
export HISTCONTROL=

# If IBM CPLEX is installed
export CPLEX_PREFIX=/opt/ibm/ILOG/CPLEX_Studio_Community1263
if [ -d "$CPLEX_PREFIX" ]; then
    export PATH=$PATH:$CPLEX_PREFIX/cplex/bin/x86-64_linux/
    export PATH=$PATH:$CPLEX_PREFIX/opl/oplide/
    export PATH=$PATH:$CPLEX_PREFIX/cplex/include/
    export PATH=$PATH:$CPLEX_PREFIX/opl/include/
    export PATH=$PATH:$CPLEX_PREFIX/opl/

    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/cplex/lib/x86-64_linux/static_pic
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/cplex/bin/x86-64_linux/
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/opl/bin/x86-64_linux
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/opl/lib/x86-64_linux/static_pic
fi


# Add CUDA to the library paths if it exists
if [ -d "/usr/local/cuda" ]; then
    # Use the symlinked version if available
    export PATH=$PATH:/usr/local/cuda/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64

    export LIBRARY_PATH=/usr/local/cuda/lib64
elif [ -d "/usr/local/cuda" ]; then
    # Use an explicit version if available
    export PATH=$PATH:/usr/local/cuda7.5/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda7.5/lib64
fi

# Other program environment variables
if [[ "$HOSTNAME" == "hyrule"  ]]; then 
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-7.5/targets/x86_64-linux/lib:/usr/local/lib
    #export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
    # hacky
    #export TOMCAT_DIR=$CODE_DIR/Wildbook/tmp/apache-tomcat-8.0.24
    #export TOMCAT_HOME=$TOMCAT_DIR
    #export CATALINA_HOME=$TOMCAT_DIR
    export TEXLIVE_BIN=$(echo /usr/local/texlive/*/bin/x86_64-linux)
elif [[ "$HOSTNAME" == "dozer"  ]]; then 
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-6.5/lib64:/usr/local/lib
    export PATH=$PATH:/usr/local/cuda-6.5/bin
elif [[ "$HOSTNAME" == "Ooo"  ]]; then 
    export THEANO_FLAGS="device=cpu"
    export TEXLIVE_BIN=$(echo /usr/local/texlive/*/bin/x86_64-linux)
elif [[ "$HOSTNAME" == "Leviathan"  ]]; then 
    export THEANO_FLAGS='floatX=float32,device=cuda'
else
    # These paths are likely to be true on other machines as weel
    #export PATH=$PATH:/usr/local/cuda/bin
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib
    #export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
    export PATH=$PATH
fi


if [ -d "$TEXLIVE_BIN" ]; then
    #export PATH=$PATH:$TEXLIVE_BIN
    export PATH=$TEXLIVE_BIN:$PATH
fi

#export UTOOL_DPATH=~/latex/crall-candidacy-2015/

complete -W "gp focus kill project_dpaths sync_clipboard_to grepnr printproc_2 send add_path write_env print_path grepc grepr grep research_clipboard fix_path foo fixpath2 write_rob_pathcache sed reg_disable_automatic_reboot_122614 find write_regfile pykill symlink update_path printproc_ write_path search update_env make_dpath invgrep send_command research ps send_clipboard_to make_complete pref_env print_env create_shortcut info hskill process_research_line write_research find_in_path get_regstr preprocess_research sedr update setup_global sp print_clipboard upenv fix_youtube_names_ccl dump_clipboard" "rob"

#source ~/.config/ibeis/ibeis_bash_complete.sh

export PATH=$(pathvar_clean PATH)
export LD_LIBRARY_PATH=$(pathvar_clean LD_LIBRARY_PATH)


# https://unix.stackexchange.com/questions/813/how-to-determine-where-an-environment-variable-came-from 
debug(){
    sudo grep -r VIRTUAL_ENV /etc
    grep -r VIRTUAL_ENV ~/local
    grep -r VIRTUAL_ENV ~

    pathvar_print PATH
}

#echo "CURRENT VIRTAL_ENV=$VIRTUAL_ENV"
if [ "$VIRTUAL_ENV" == "" ]; then
    # For some reason VIRTUAL_ENV is initialized as "", so unset it
    unset VIRTUAL_ENV
    # Use this venv for initialization
    workon_py3
else
    # On reload use the same venv you were in
    workon_py $VIRTUAL_ENV
fi

# Clean paths again before workon stuff happens
export PATH=$(pathvar_clean PATH)
export LD_LIBRARY_PATH=$(pathvar_clean LD_LIBRARY_PATH)

#env
#workon_py2
#workon_pypy
#deactivate_venv
