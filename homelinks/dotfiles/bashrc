#!/bin/sh

# DEBUG WHERE SOMETHING CAME FROM
#set -x
#if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
#    source /etc/profile.d/vte.sh
#fi

export QT_ACCESSIBILITY=0
export QT_API=pyqt

#export PYTHONWARNINGS="once"
#export PYTHONWARNINGS="default"

#echo << EOF
## There are a few places where environment variables are set before .bashrc
## They are:
## /etc/environment
## /etc/bash.bashrc
#EOF 

# I don't know why this is populated to begin with
#echo "PATH(pre-bashrc) = $PATH"
#export PATH=""
#export PATH="$PATH:$HOME/bin"
#export PATH="$PATH:/usr/local/sbin:/usr/local/bin"
#export PATH="$PATH:/usr/sbin:/usr/bin:/sbin:/bin"
#export PATH="$PATH:/usr/games:/usr/local/games:/snap/bin"

#export CC=gcc
#export CXX=g++
#export CC=/usr/bin/clang-4.0
#export CXX=/usr/bin/clang++-4.0

############
# Pre BASHRC
############
# Undo weird basic settings (This lets us be confident in the output of this script)
export LD_LIBRARY_PATH=""
export CPATH=""
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"

#echo "PATH = $PATH"
#echo "CPATH = $CPATH"
#echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"


############
# USER LEVEL (takes top priority)
############

export PATH=$HOME/bin:$PATH

export PATH=$HOME/.local/bin:$PATH
export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH


export PATH=$PATH:$HOME/scripts
export PATH=$PATH:$HOME/local/git_tools/scripts
#export PATH=$PATH:$HOME/misc/git

if [ -d "$HOME/.local" ]; then
    export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/.local
fi



# ----------- CUDA / CUDNN ---------
# Determine if/where CUDA is installed
if [ -f "$HOME/.local/cuda/version.txt" ]; then
    _CUDA_ROOT="$HOME/.local/cuda"
elif [ -f "/usr/local/cuda/version.txt" ]; then
    _CUDA_ROOT="/usr/local/cuda"
fi

# Determine if/where CUDNN is installed
if [ -f "$HOME/.local/cuda/lib64/libcudnn.so" ]; then
    _CUDNN_ROOT="$HOME/.local/cuda"
elif [ -f "/usr/local/cuda/lib64/libcudnn.so" ]; then
    _CUDNN_ROOT="/usr/local/cuda"
fi

# Add CUDA/CUDNN to the library paths if they exist
if [ "$_CUDA_ROOT" != "" ]; then
    # Prepend to get around weird system ld_library_paths
    export CPATH=$_CUDA_ROOT/include:$CPATH
    export LD_LIBRARY_PATH=$_CUDA_ROOT/lib64:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$_CUDA_ROOT:$CMAKE_PREFIX_PATH

    if [ -f "$_CUDA_ROOT/bin/nvcc" ]; then
        export PATH=$_CUDA_ROOT/bin:$PATH
        export CUDAHOME=$_CUDA_ROOT
        export CUDA_HOME=$_CUDA_ROOT
        export CUDA_PATH=$_CUDA_ROOT
        export CUDA_BIN_PATH=$_CUDA_ROOT/bin
        export CUDA_TOOLKIT_ROOT_DIR=$_CUDA_ROOT
        export CUDA_SDK_ROOT_DIR=$_CUDA_ROOT
        export CUDA_NVCC_EXECUTABLE=$_CUDA_ROOT/bin/nvcc
    fi

    if [ "$_CUDNN_ROOT" != "" ]; then
        if [ "$_CUDA_ROOT" != "$_CUDNN_ROOT" ]; then
            # cudnn may not be in the same place as cuda.
            export CPATH=$_CUDNN_ROOT/include:$CPATH
            export LD_LIBRARY_PATH=$_CUDNN_ROOT/lib64:$LD_LIBRARY_PATH
            export CMAKE_PREFIX_PATH=$_CUDNN_ROOT:$CMAKE_PREFIX_PATH
        fi
        export CUDNN_INCLUDE_DIR=$_CUDNN_ROOT/include
        export CUDNN_LIB_DIR=$_CUDNN_ROOT/lib64
        export CUDNN_LIBRARY=$CUDNN_LIB_DIR/libcudnn.so
        export CUDNN_LIBRARIES=$CUDNN_LIBRARY
    fi
fi
# ------------------


# Add user intel-libs to the library paths if it exists
if [ -d "$HOME/.local/intel/ipp/lib/intel64" ]; then
    # Prepend to get around weird system ld_library_paths
    export CPATH=$HOME/.local/intel/ipp/include:$CPATH
    export LD_LIBRARY_PATH=$HOME/.local/intel/ipp/lib/intel64:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/.local/intel/ipp
fi


##############
# System Level (priorty after user)
##############


export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:



if [ -f "$HOME/.local/conda/etc/profile.d/conda.sh" ]; then
    # Add the conda command to the environment if conda is installed 
    # (note this does not modify the path or add conda python)
    source $HOME/.local/conda/etc/profile.d/conda.sh
    complete -W "deactivate activate env clean config create help info install list package remove uninstall search update upgrade -h --help -V --version" "conda"
fi


# My standard environment variables
if [[ "$HOSTNAME" == "ibeis.cs.uic.edu"  ]]; then 
    export CODE_DIR=/opt/ibeis
elif [[ "$HOSTNAME" == "pachy.cs.uic.edu"  ]]; then 
    export CODE_DIR=/opt/ibeis
else
    export CODE_DIR=$HOME/code
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
    export NCPUS=$(sysctl -n hw.ncpu)
    #source $HOME/local/homelinks/helpers/bashrc_mac.sh
else
    export NCPUS=$(grep -c ^processor /proc/cpuinfo)
    source $HOME/local/homelinks/helpers/bashrc_ubuntu.sh
fi

source $HOME/local/init/utils.sh
source $HOME/local/homelinks/helpers/git_helpers.sh
source $HOME/local/homelinks/helpers/alias_helpers.sh


# set history to not ignore leading whitespace
export HISTCONTROL=

# If IBM CPLEX is installed
CPLEX_PREFIX=/opt/ibm/ILOG/CPLEX_Studio_Community1263
if [ -d "$CPLEX_PREFIX" ]; then
    export PATH=$PATH:$CPLEX_PREFIX/cplex/bin/x86-64_linux/
    export PATH=$PATH:$CPLEX_PREFIX/opl/oplide/
    export PATH=$PATH:$CPLEX_PREFIX/cplex/include/
    export PATH=$PATH:$CPLEX_PREFIX/opl/include/
    export PATH=$PATH:$CPLEX_PREFIX/opl/

    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/cplex/lib/x86-64_linux/static_pic
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/cplex/bin/x86-64_linux/
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/opl/bin/x86-64_linux
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/opl/lib/x86-64_linux/static_pic
else
    CPLEX_PREFIX=""
fi

# Other program environment variables
if [[ "$HOSTNAME" == "hyrule"  ]]; then 
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-7.5/targets/x86_64-linux/lib:/usr/local/lib
    #export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
    # hacky
    #export TOMCAT_DIR=$CODE_DIR/Wildbook/tmp/apache-tomcat-8.0.24
    #export TOMCAT_HOME=$TOMCAT_DIR
    #export CATALINA_HOME=$TOMCAT_DIR
    export TEXLIVE_BIN=$(echo /usr/local/texlive/*/bin/x86_64-linux)
#elif [[ "$HOSTNAME" == "dozer"  ]]; then 
#    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-6.5/lib64:/usr/local/lib
#    export PATH=$PATH:/usr/local/cuda-6.5/bin
elif [[ "$HOSTNAME" == "Ooo"  ]]; then 
    export THEANO_FLAGS="device=cpu"
    export TEXLIVE_BIN=$(echo /usr/local/texlive/*/bin/x86_64-linux)
elif [[ "$HOSTNAME" == "Leviathan"  ]]; then 
    export THEANO_FLAGS='floatX=float32,device=cuda'
else
    # These paths are likely to be true on other machines as weel
    #export PATH=$PATH:/usr/local/cuda/bin
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib
    #export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
    export PATH=$PATH
fi


if [ -d "$TEXLIVE_BIN" ]; then
    #export PATH=$PATH:$TEXLIVE_BIN
    export PATH=$TEXLIVE_BIN:$PATH
fi

#export UTOOL_DPATH=$HOME/latex/crall-candidacy-2015/

# TODO: can this be done on the fly?
complete -W "gp focus kill project_dpaths sync_clipboard_to grepnr printproc_2 send add_path write_env print_path grepc grepr grep research_clipboard fix_path foo fixpath2 write_rob_pathcache sed reg_disable_automatic_reboot_122614 find write_regfile pykill symlink update_path printproc_ write_path search update_env make_dpath invgrep send_command research ps send_clipboard_to make_complete pref_env print_env create_shortcut info hskill process_research_line write_research find_in_path get_regstr preprocess_research sedr update setup_global sp print_clipboard upenv fix_youtube_names_ccl dump_clipboard" "rob"

#source $HOME/.config/ibeis/ibeis_bash_complete.sh

export PATH=$(pathvar_clean PATH)
export LD_LIBRARY_PATH=$(pathvar_clean LD_LIBRARY_PATH)
export CMAKE_PREFIX_PATH=$(pathvar_clean CMAKE_PREFIX_PATH)
export CPATH=$(pathvar_clean CPATH)


# https://unix.stackexchange.com/questions/813/how-to-determine-where-an-environment-variable-came-from 
debug(){
    sudo grep -r VIRTUAL_ENV /etc
    grep -r VIRTUAL_ENV $HOME/local
    grep -r VIRTUAL_ENV $HOME

    pathvar_print PATH
}

#echo "CONDA_PREFIX = $CONDA_PREFIX"
#echo "CURRENT VIRTAL_ENV=$VIRTUAL_ENV"
if [ "$DID_MY_BASHRC_INIT" == "" ]; then
    # For some reason VIRTUAL_ENV is initialized as "", so unset it
    unset VIRTUAL_ENV
    # Use this venv for initialization
    #workon_py3
    #workon_py "$HOME/venv3"
    #workon_py "$HOME/venv3"
    #echo "WORKON BASIC"
    workon_py py36
elif [ "$VIRTUAL_ENV" != "" ]; then
    # On reload use the same venv you were in
    #echo "WORKON VIRTUAL_ENV = $VIRTUAL_ENV"
    workon_py $VIRTUAL_ENV
elif [ "$CONDA_PREFIX" != "" ]; then
    # On reload use the same venv you were in
    #echo "WORKON CONDA_PREFIX = $CONDA_PREFIX"
    workon_py $CONDA_PREFIX
fi

# Clean paths again before workon stuff happens
export PATH=$(pathvar_clean PATH)
export LD_LIBRARY_PATH=$(pathvar_clean LD_LIBRARY_PATH)
export CMAKE_PREFIX_PATH=$(pathvar_clean CMAKE_PREFIX_PATH)
export CPATH=$(pathvar_clean CPATH)


DEBUG_BASHRC=0

if [ "$DEBUG_BASHRC" == "True" ]; then
    print_all_pathvars
fi

#env
#workon_py2
#workon_pypy
#deactivate_venv


if [ "$USER" == "jon.crall" ] || [ "$USER" == "joncrall" ] ; then
    IS_JONCRALL=True
else
    IS_JONCRALL=False
fi


#IS_JONCRALL=True
#if [ $IS_JONCRALL = True ]; then 
#    echo "foo"
#else
#    echo "bar"
#fi
#IS_JONCRALL=False
#if [ $IS_JONCRALL = True ]; then 
#    echo "foo"
#else
#    echo "bar"
#fi

if [ -f "$HOME/.bashrc-local" ]; then 
    # For machine-specific bashrc things that will not be published on github
    source $HOME/.bashrc-local
fi

DID_MY_BASHRC_INIT="TRUE"

# super trick: make multiprocessing actually use multiple cores
# https://stackoverflow.com/questions/15639779/why-does-multiprocessing-use-only-a-single-core-after-i-import-numpy
#export OPENBLAS_MAIN_FREE=1


#-DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=True -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=True -DCMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY=True
