#!/bin/bash
######################
# Debugging code
# DEBUG WHERE SOMETHING CAME FROM
#set -x
#if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
#    source /etc/profile.d/vte.sh
#fi

# I don't know why this is populated to begin with
#echo "PATH(pre-bashrc) = $PATH"

#export PYTHONWARNINGS="once"
#export PYTHONWARNINGS="default"

#echo << EOF
## There are a few places where environment variables are set before .bashrc
## They are:
## /etc/environment
## /etc/bash.bashrc
#EOF 


# TODO:
# There seems to be some situations where environment variables will persist
# even if you close the terminal and open a new one. I'm not sure exactly what
# is going on. Perhaps it is because I'm in a gnome session and something in
# gnome deals with environs on startup. Running (env) at the top of this script
# can show what environns are set before we get in here.
#
# NOTE: I solved the above problem. On startup and ssh-login, there are files
# that will execute the user bashrc, polluting the variable namespace. 
# not sure exactly where I write this down though.


#echo "PATH = $PATH"
#echo "CPATH = $CPATH"
#echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"


######################
# Start of real bashrc


#export GCC_VERSION=6
#export CUDA_HOST_COMPILER=/usr/bin/gcc-$GCC_VERSION
#export CC=gcc-$GCC_VERSION
#export CXX=g++-$GCC_VERSION
__doc__='

sudo apt install g++-5

python setup.py clean
rm -rf build/
rm -rf torch.egg-info
export GCC_VERSION=6
CUDA_HOST_COMPILER=/usr/bin/gcc-$GCC_VERSION CC=gcc-$GCC_VERSION CXX=g++$GCC_VERSION python setup.py build

CUDA_HOST_COMPILER=/usr/bin/gcc-5 CC=gcc-5 CXX=g++-5 python setup.py develop
CUDA_HOST_COMPILER=/usr/bin/gcc-5 CC=gcc-5 CXX=g++-5 python setup.py build_ext --inplace
'

# Test if I am logging into my own account.
if [ "$USER" = "jon.crall" ] || [ "$USER" = "joncrall" ] ; then
    IS_JONCRALL=True
else
    IS_JONCRALL=""
fi

#export QT_ACCESSIBILITY=0
#export QT_API=pyqt5

#export CC=gcc
#export CXX=g++
#export CC=/usr/bin/clang-4.0
#export CXX=/usr/bin/clang++-4.0

############
# Pre BASHRC
############
# Undo weird basic settings (This lets us be confident in the output of this script)
# Note: only do this if I'm logged into my account. If I'm on a different
# account (e.g. root on a docker container), then dont clobber existing
# variables.

if [ "$IS_JONCRALL" ]; then
    export LD_LIBRARY_PATH=""
    export CPATH=""
    export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
fi
export CODE_DIR=$HOME/code

############
# USER LEVEL (takes top priority)
############

export PATH=$HOME/bin:$PATH

export PATH=$HOME/.local/bin:$PATH
export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH

export EDITOR=vim


export PATH=$PATH:$HOME/scripts
export PATH=$PATH:$HOME/local/git_tools/scripts
#export PATH=$PATH:$HOME/misc/git

if [ -d "$HOME/.local" ]; then
    export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/.local
fi


if [ -d "$HOME/.local/opt" ]; then
    if [ -d "$HOME/.local/opt/android-studio" ]; then
        export PATH=$PATH:$HOME/.local/opt/android-studio/bin
    fi
    if [ -d "$HOME/.local/opt/obs" ]; then
        export PATH=$PATH:$HOME/.local/opt/obs/bin
    export LD_LIBRARY_PATH=$HOME/.local/opt/obs/lib:$LD_LIBRARY_PATH
    fi
fi


# Fix GPG signing for git commits
# https://stackoverflow.com/a/42265848
# https://www.gnupg.org/(it)/documentation/manuals/gnupg/Common-Problems.html
# shellcheck disable=SC2155
export GPG_TTY=$(tty)


# ----------- CUDA / CUDNN ---------
# Determine if/where CUDA is installed

if [ -f "$HOME/.local/cuda/version.json" ]; then
    _CUDA_ROOT="$HOME/.local/cuda"
elif [ -f "$HOME/.local/cuda/version.txt" ]; then
    _CUDA_ROOT="$HOME/.local/cuda"
elif [ -f "/usr/local/cuda/version.txt" ]; then
    _CUDA_ROOT="/usr/local/cuda"
fi

# Determine if/where CUDNN is installed
if [ -f "$HOME/.local/cuda/lib64/libcudnn.so" ]; then
    _CUDNN_ROOT="$HOME/.local/cuda"
elif [ -f "/usr/local/cuda/lib64/libcudnn.so" ]; then
    _CUDNN_ROOT="/usr/local/cuda"
fi

# Add CUDA/CUDNN to the library paths if they exist
if [ "$_CUDA_ROOT" != "" ]; then
    # Prepend to get around weird system ld_library_paths
    export CPATH=$_CUDA_ROOT/include:$CPATH
    export LD_LIBRARY_PATH=$_CUDA_ROOT/lib64:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$_CUDA_ROOT:$CMAKE_PREFIX_PATH

    if [ -f "$_CUDA_ROOT/bin/nvcc" ]; then
        export PATH=$_CUDA_ROOT/bin:$PATH
        export CUDAHOME=$_CUDA_ROOT
        export CUDA_HOME=$_CUDA_ROOT
        export CUDA_PATH=$_CUDA_ROOT
        export CUDA_BIN_PATH=$_CUDA_ROOT/bin
        export CUDA_TOOLKIT_ROOT_DIR=$_CUDA_ROOT
        export CUDA_SDK_ROOT_DIR=$_CUDA_ROOT
        export CUDA_NVCC_EXECUTABLE=$_CUDA_ROOT/bin/nvcc
    fi

    if [ "$_CUDNN_ROOT" != "" ]; then
        if [ "$_CUDA_ROOT" != "$_CUDNN_ROOT" ]; then
            # cudnn may not be in the same place as cuda.
            export CPATH=$_CUDNN_ROOT/include:$CPATH
            export LD_LIBRARY_PATH=$_CUDNN_ROOT/lib64:$LD_LIBRARY_PATH
            export CMAKE_PREFIX_PATH=$_CUDNN_ROOT:$CMAKE_PREFIX_PATH
        fi
        export CUDNN_INCLUDE_DIR=$_CUDNN_ROOT/include
        export CUDNN_LIB_DIR=$_CUDNN_ROOT/lib64
        export CUDNN_LIBRARY=$CUDNN_LIB_DIR/libcudnn.so
        export CUDNN_LIBRARIES=$CUDNN_LIBRARY
    fi
fi
# ------------------


# Add user intel-libs to the library paths if it exists
if [ -d "$HOME/.local/intel/ipp/lib/intel64" ]; then
    # Prepend to get around weird system ld_library_paths
    export CPATH=$HOME/.local/intel/ipp/include:$CPATH
    export LD_LIBRARY_PATH=$HOME/.local/intel/ipp/lib/intel64:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/.local/intel/ipp
fi


##############
# System Level (priorty after user)
##############


export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:


# Add the conda command to our environment if it exists
if [ -f "$HOME/.local/conda/etc/profile.d/conda.sh" ]; then
    # Add the conda command to the environment if conda is installed 
    # (note this does not modify the path or add conda python)
    source "$HOME/.local/conda/etc/profile.d/conda.sh"
    complete -W "deactivate activate env clean config create help info install list package remove uninstall search update upgrade -h --help -V --version" "conda"
fi

# Add the pyenv command to our environment if it exists

#source $HOME/local/tools/pyenv_ext/pyenv_ext_commands.sh
export PYENV_ROOT="$HOME/.pyenv"
if [ -d "$PYENV_ROOT" ]; then
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$("$PYENV_ROOT"/bin/pyenv init -)"
    eval "$("$PYENV_ROOT"/bin/pyenv init --path)"
    #eval "$(pyenv init --path)"
    #eval "$(pyenv init -)"
    source "$PYENV_ROOT/completions/pyenv.bash"
    export PYENV_PREFIX
    PYENV_PREFIX=$(pyenv prefix)
fi


if [[ "$OSTYPE" == "darwin"* ]]; then
    :
    #export NCPUS=$(sysctl -n hw.ncpu)
    #source $HOME/local/homelinks/helpers/bashrc_mac.sh
else
    #export NCPUS=$(grep -c ^processor /proc/cpuinfo)
    source "$HOME/local/homelinks/helpers/bashrc_ubuntu.sh"
fi


source "$HOME/local/init/utils.sh"
source "$HOME/local/homelinks/helpers/git_helpers.sh"
source "$HOME/local/homelinks/helpers/alias_helpers.sh"



# set history to not ignore leading whitespace
export HISTCONTROL=


# If IBM CPLEX is installed
CPLEX_PREFIX=/opt/ibm/ILOG/CPLEX_Studio_Community1263
if [ -d "$CPLEX_PREFIX" ]; then
    export PATH=$PATH:$CPLEX_PREFIX/cplex/bin/x86-64_linux/
    export PATH=$PATH:$CPLEX_PREFIX/opl/oplide/
    export PATH=$PATH:$CPLEX_PREFIX/cplex/include/
    export PATH=$PATH:$CPLEX_PREFIX/opl/include/
    export PATH=$PATH:$CPLEX_PREFIX/opl/

    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/cplex/lib/x86-64_linux/static_pic
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/cplex/bin/x86-64_linux/
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/opl/bin/x86-64_linux
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CPLEX_PREFIX/opl/lib/x86-64_linux/static_pic
else
    CPLEX_PREFIX=""
fi

# Other program environment variables
#if [[ "$HOSTNAME" == "hyrule"  ]]; then 
#    export TEXLIVE_BIN=$(echo /usr/local/texlive/*/bin/x86_64-linux)
#elif [[ "$HOSTNAME" == "Ooo"  ]]; then 
#    export TEXLIVE_BIN=$(echo /usr/local/texlive/*/bin/x86_64-linux)
#fi
#if [ -d "$TEXLIVE_BIN" ]; then
#    export PATH=$TEXLIVE_BIN:$PATH
#fi


#export UTOOL_DPATH=$HOME/latex/crall-candidacy-2015/
# TODO: can this be done on the fly?
# I think it can with argcomplete
#complete -W "gp focus kill project_dpaths sync_clipboard_to grepnr printproc_2 send add_path write_env print_path grepc grepr grep research_clipboard fix_path foo fixpath2 write_rob_pathcache sed reg_disable_automatic_reboot_122614 find write_regfile pykill symlink update_path printproc_ write_path search update_env make_dpath invgrep send_command research ps send_clipboard_to make_complete pref_env print_env create_shortcut info hskill process_research_line write_research find_in_path get_regstr preprocess_research sedr update setup_global sp print_clipboard upenv fix_youtube_names_ccl dump_clipboard" "rob"

#source $HOME/.config/ibeis/ibeis_bash_complete.sh
#export PATH=$(pathvar_clean PATH)
#export LD_LIBRARY_PATH=$(pathvar_clean LD_LIBRARY_PATH)
#export CMAKE_PREFIX_PATH=$(pathvar_clean CMAKE_PREFIX_PATH)
#export CPATH=$(pathvar_clean CPATH)


# https://unix.stackexchange.com/questions/813/how-to-determine-where-an-environment-variable-came-from 
#debug(){
#    sudo grep -r VIRTUAL_ENV /etc
#    grep -r VIRTUAL_ENV $HOME/local
#    grep -r VIRTUAL_ENV $HOME

#    echo "PATH = "
#    pathvar_print PATH

#    echo "LD_LIBRARY_PATH = "
#    pathvar_print LD_LIBRARY_PATH

#    echo "CPATH = "
#    pathvar_print CPATH

#    echo "CMAKE_PREFIX_PATH = "
#    pathvar_print CMAKE_PREFIX_PATH
#}


# HACK FOR ME
_CONDA_ROOT="$HOME/.local/conda/""$PYENV_ROOT/versions/$CHOSEN_PYTHON_VERSION/envs/pyenv$CHOSEN_PYTHON_VERSION"

_AUTOSTART_VENV=1
if [[ "$_AUTOSTART_VENV" == "1" ]]; then
    if [ "$DID_MY_BASHRC_INIT" == "" ]; then
        # For some reason VIRTUAL_ENV is initialized as "", so unset it
        unset VIRTUAL_ENV
        #CHOSEN_PYTHON_VERSION=3.8.6
        CHOSEN_PYTHON_VERSION=3.9.9
        echo $CHOSEN_PYTHON_VERSION
        if [ -d "$PYENV_ROOT/versions/$CHOSEN_PYTHON_VERSION/envs/pyenv$CHOSEN_PYTHON_VERSION" ]; then
            pyenv shell $CHOSEN_PYTHON_VERSION
            source "$PYENV_ROOT/versions/$CHOSEN_PYTHON_VERSION/envs/pyenv$CHOSEN_PYTHON_VERSION/bin/activate" 
        elif [ -d "$HOME/.local/conda/envs/conda38" ]; then
            conda activate conda38
        elif [ -d "$HOME/.local/conda/envs/py38" ]; then
            conda activate py38
        elif [ -d "$HOME/.local/conda/envs/py37" ]; then
            conda activate py37
        elif [ -d "$HOME/.local/conda/envs/py36" ]; then
            conda activate py36
        fi 

    elif [ "$VIRTUAL_ENV" != "" ]; then
        # On reload use the same venv you were in
        #echo "WORKON VIRTUAL_ENV = $VIRTUAL_ENV"
        workon_py "$VIRTUAL_ENV"
    elif [ "$CONDA_PREFIX" != "" ]; then
        # On reload use the same venv you were in
        #echo "WORKON CONDA_PREFIX = $CONDA_PREFIX"
        workon_py "$CONDA_PREFIX"
    fi

fi

# Clean paths again before workon stuff happens
#export PATH=$(pathvar_clean PATH)
#export LD_LIBRARY_PATH=$(pathvar_clean LD_LIBRARY_PATH)
#export CMAKE_PREFIX_PATH=$(pathvar_clean CMAKE_PREFIX_PATH)
#export CPATH=$(pathvar_clean CPATH)


#DEBUG_BASHRC=0
#if [ "$DEBUG_BASHRC" == "True" ]; then
#    print_all_pathvars
#fi

if is_probably_decrypted "$HOME/.bashrc-erotemic.sh" > /dev/null ; then 
    # For machine-specific bashrc things that will not be published on github
    source "$HOME/.bashrc-erotemic.sh"
fi

if is_probably_decrypted "$HOME/.bashrc-internal.sh" > /dev/null ; then 
    source "$HOME/.bashrc-internal.sh"
fi

if is_probably_decrypted "$HOME/.bashrc-local" > /dev/null ; then 
    source "$HOME/.bashrc-local"
fi

if is_probably_decrypted "$HOME/.bashrc-local.sh" > /dev/null ; then 
    source "$HOME/.bashrc-local.sh"
fi

DID_MY_BASHRC_INIT="TRUE"

# super trick: make multiprocessing actually use multiple cores
# https://stackoverflow.com/questions/15639779/why-does-multiprocessing-use-only-a-single-core-after-i-import-numpy
#export OPENBLAS_MAIN_FREE=1

alias ls='ls --color --human-readable'

# added by travis gem
#[ -f /home/joncrall/.travis/travis.sh ] && source /home/joncrall/.travis/travis.sh


# Prevent dollar sign from being escaped on tab complete
# https://askubuntu.com/questions/1245016/how-to-disable-automatic-backslash-insert-when-using-environment-variable-names
shopt -s direxpand


# Disable the terminal bell
# https://linuxconfig.org/turn-off-beep-bell-on-linux-terminal
set bell-style none


# Generate via
# pip completion --bash
# pip bash completion start
_pip_completion()
{
    # shellcheck disable=SC2207
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end
